
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dan.Mera
 */
//public class ServiceReceipt extends javax.swing.JPanel {
public class ServiceReceipt extends javax.swing.JFrame {

    
    /**
     * Creates new form ServiceReceipt
     */
    public ServiceReceipt() {
        System.out.println("===ServiceReceipt===");
        initComponents();
        grpFreq();
        grpServType();
        grpPayment();
        grpSchedule();
        CustDlg my_dlg = new CustDlg();
        my_dlg.init();
        my_dlg.dispose();
        if (CustomerType == "Existing"){
        }
        else{
            disable_form();
        }
        //establishConnection();
        System.out.println("this is a " + this.CustomerType + " customer!");
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlInfo = new javax.swing.JPanel();
        pnlBillingCustomer = new javax.swing.JPanel();
        lblBillingName = new javax.swing.JLabel();
        lblBillingStreet = new javax.swing.JLabel();
        lblBillingCity = new javax.swing.JLabel();
        lblBillingContact = new javax.swing.JLabel();
        lblBillingPhone1 = new javax.swing.JLabel();
        lblBillingPhone2 = new javax.swing.JLabel();
        lblBillingExt1 = new javax.swing.JLabel();
        lblBillingExt2 = new javax.swing.JLabel();
        lblBillingProv = new javax.swing.JLabel();
        lblBillingFax = new javax.swing.JLabel();
        lblBillingEmail = new javax.swing.JLabel();
        lblBillingPostalCode = new javax.swing.JLabel();
        lblBillingAlias = new javax.swing.JLabel();
        txtBillingName = new javax.swing.JTextField();
        txtBillingContact = new javax.swing.JTextField();
        txtBillingPhone1 = new javax.swing.JTextField();
        txtBillingPhone2 = new javax.swing.JTextField();
        txtBillingExt1 = new javax.swing.JTextField();
        txtBillingExt2 = new javax.swing.JTextField();
        txtBillingProv = new javax.swing.JTextField();
        txtBillingFax = new javax.swing.JTextField();
        txtBillingEmail = new javax.swing.JTextField();
        txtBillingCity = new javax.swing.JTextField();
        txtBillingPostalCode = new javax.swing.JTextField();
        txtBillingStreet = new javax.swing.JTextField();
        txtBillingAlias = new javax.swing.JTextField();
        lblBillingDept = new javax.swing.JLabel();
        lblBillingContract = new javax.swing.JLabel();
        txtBillingDept = new javax.swing.JTextField();
        txtBillingContract = new javax.swing.JTextField();
        btnDocumentation = new javax.swing.JButton();
        pnlCustomer = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblStreet = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblContact = new javax.swing.JLabel();
        lblPhone1 = new javax.swing.JLabel();
        lblPhone2 = new javax.swing.JLabel();
        lblExt1 = new javax.swing.JLabel();
        lblExt2 = new javax.swing.JLabel();
        lblProv = new javax.swing.JLabel();
        lblFax = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPostalCode = new javax.swing.JLabel();
        lblStreetInfo = new javax.swing.JLabel();
        lblNameInfo = new javax.swing.JLabel();
        lblUnit = new javax.swing.JLabel();
        txtCustomer = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        txtPhone1 = new javax.swing.JTextField();
        txtPhone2 = new javax.swing.JTextField();
        txtExt1 = new javax.swing.JTextField();
        txtExt2 = new javax.swing.JTextField();
        txtProv = new javax.swing.JTextField();
        txtFax = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtPostalCode = new javax.swing.JTextField();
        txtStreet = new javax.swing.JTextField();
        txtStreetInfo = new javax.swing.JTextField();
        txtCustInfo = new javax.swing.JTextField();
        txtUnit = new javax.swing.JTextField();
        lblBundled = new javax.swing.JLabel();
        cbBundle = new javax.swing.JCheckBox();
        lblAvailBundles = new javax.swing.JLabel();
        cmbBundles = new javax.swing.JComboBox<>();
        pnlDetails = new javax.swing.JPanel();
        lblPO = new javax.swing.JLabel();
        txtPO = new javax.swing.JTextField();
        pnlFreq = new javax.swing.JPanel();
        btngrpPerService = new javax.swing.JRadioButton();
        btngrpMonthly = new javax.swing.JRadioButton();
        pnlPayment = new javax.swing.JPanel();
        rbCheck = new javax.swing.JRadioButton();
        rbVisa = new javax.swing.JRadioButton();
        rbMastercard = new javax.swing.JRadioButton();
        rbPcard = new javax.swing.JRadioButton();
        rbOthers = new javax.swing.JRadioButton();
        pnlService = new javax.swing.JPanel();
        rbEmergency = new javax.swing.JRadioButton();
        rbBlock = new javax.swing.JRadioButton();
        rbRegular = new javax.swing.JRadioButton();
        rbNew = new javax.swing.JRadioButton();
        rbProduct = new javax.swing.JRadioButton();
        rbFollowup = new javax.swing.JRadioButton();
        rbOther = new javax.swing.JRadioButton();
        rbInSuit = new javax.swing.JRadioButton();
        pnlSchedule = new javax.swing.JPanel();
        pnlPartOfDay = new javax.swing.JPanel();
        rbAM = new javax.swing.JRadioButton();
        rbPM = new javax.swing.JRadioButton();
        rbAnytime = new javax.swing.JRadioButton();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        pnlActions = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1100, 772));
        setMinimumSize(new java.awt.Dimension(1100, 772));
        setName("frmServiceReceipt"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1100, 772));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Create Service Receipt");
        jLabel1.setFocusable(false);

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTitleLayout.createSequentialGroup()
                .addGap(421, 421, 421)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(421, 421, 421))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBillingCustomer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Billing Info(only if different):", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlBillingCustomer.setFocusable(false);
        pnlBillingCustomer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pnlBillingCustomer.setMinimumSize(new java.awt.Dimension(100, 100));
        pnlBillingCustomer.setPreferredSize(new java.awt.Dimension(560, 250));
        pnlBillingCustomer.setRequestFocusEnabled(false);
        pnlBillingCustomer.setVerifyInputWhenFocusTarget(false);

        lblBillingName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingName.setText("Company:");
        lblBillingName.setToolTipText("");
        lblBillingName.setEnabled(false);
        lblBillingName.setFocusable(false);
        lblBillingName.setRequestFocusEnabled(false);
        lblBillingName.setVerifyInputWhenFocusTarget(false);

        lblBillingStreet.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingStreet.setText("Street:");
        lblBillingStreet.setEnabled(false);
        lblBillingStreet.setFocusable(false);
        lblBillingStreet.setRequestFocusEnabled(false);
        lblBillingStreet.setVerifyInputWhenFocusTarget(false);

        lblBillingCity.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingCity.setText("City:");
        lblBillingCity.setToolTipText("");
        lblBillingCity.setEnabled(false);
        lblBillingCity.setFocusable(false);
        lblBillingCity.setRequestFocusEnabled(false);
        lblBillingCity.setVerifyInputWhenFocusTarget(false);

        lblBillingContact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingContact.setText("Contact Name:");
        lblBillingContact.setToolTipText("");
        lblBillingContact.setEnabled(false);
        lblBillingContact.setFocusable(false);
        lblBillingContact.setRequestFocusEnabled(false);
        lblBillingContact.setVerifyInputWhenFocusTarget(false);

        lblBillingPhone1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingPhone1.setText("Phone #1:");
        lblBillingPhone1.setToolTipText("");
        lblBillingPhone1.setEnabled(false);
        lblBillingPhone1.setFocusable(false);
        lblBillingPhone1.setRequestFocusEnabled(false);
        lblBillingPhone1.setVerifyInputWhenFocusTarget(false);

        lblBillingPhone2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingPhone2.setText("Phone #2:");
        lblBillingPhone2.setToolTipText("");
        lblBillingPhone2.setEnabled(false);
        lblBillingPhone2.setFocusable(false);
        lblBillingPhone2.setRequestFocusEnabled(false);
        lblBillingPhone2.setVerifyInputWhenFocusTarget(false);

        lblBillingExt1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingExt1.setText("Ext:");
        lblBillingExt1.setToolTipText("");
        lblBillingExt1.setEnabled(false);
        lblBillingExt1.setFocusable(false);
        lblBillingExt1.setRequestFocusEnabled(false);
        lblBillingExt1.setVerifyInputWhenFocusTarget(false);

        lblBillingExt2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingExt2.setText("Ext:");
        lblBillingExt2.setToolTipText("");
        lblBillingExt2.setEnabled(false);
        lblBillingExt2.setFocusable(false);
        lblBillingExt2.setRequestFocusEnabled(false);
        lblBillingExt2.setVerifyInputWhenFocusTarget(false);

        lblBillingProv.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingProv.setText("Prov:");
        lblBillingProv.setToolTipText("");
        lblBillingProv.setEnabled(false);
        lblBillingProv.setFocusable(false);
        lblBillingProv.setRequestFocusEnabled(false);
        lblBillingProv.setVerifyInputWhenFocusTarget(false);

        lblBillingFax.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingFax.setText("Fax #:");
        lblBillingFax.setToolTipText("");
        lblBillingFax.setEnabled(false);
        lblBillingFax.setFocusable(false);
        lblBillingFax.setRequestFocusEnabled(false);
        lblBillingFax.setVerifyInputWhenFocusTarget(false);

        lblBillingEmail.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingEmail.setText("Email:");
        lblBillingEmail.setToolTipText("");
        lblBillingEmail.setEnabled(false);
        lblBillingEmail.setFocusable(false);
        lblBillingEmail.setRequestFocusEnabled(false);
        lblBillingEmail.setVerifyInputWhenFocusTarget(false);

        lblBillingPostalCode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingPostalCode.setText("Postal Code:");
        lblBillingPostalCode.setToolTipText("");
        lblBillingPostalCode.setEnabled(false);
        lblBillingPostalCode.setFocusable(false);
        lblBillingPostalCode.setRequestFocusEnabled(false);
        lblBillingPostalCode.setVerifyInputWhenFocusTarget(false);

        lblBillingAlias.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingAlias.setText("Alias:");
        lblBillingAlias.setToolTipText("");
        lblBillingAlias.setEnabled(false);
        lblBillingAlias.setFocusable(false);
        lblBillingAlias.setRequestFocusEnabled(false);
        lblBillingAlias.setVerifyInputWhenFocusTarget(false);

        txtBillingName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingName.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingName.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingName.setNextFocusableComponent(txtBillingAlias);
        txtBillingName.setPreferredSize(new java.awt.Dimension(68, 17));
        txtBillingName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBillingNameFocusLost(evt);
            }
        });
        txtBillingName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingNameKeyPressed(evt);
            }
        });

        txtBillingContact.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingContact.setNextFocusableComponent(txtBillingPhone1);

        txtBillingPhone1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingPhone1.setText("xxx-xxx-xxxx");
        txtBillingPhone1.setToolTipText("");
        txtBillingPhone1.setNextFocusableComponent(txtBillingExt1);
        txtBillingPhone1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBillingPhone1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBillingPhone1FocusLost(evt);
            }
        });
        txtBillingPhone1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingPhone1KeyPressed(evt);
            }
        });

        txtBillingPhone2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingPhone2.setText("xxx-xxx-xxxx");
        txtBillingPhone2.setToolTipText("");
        txtBillingPhone2.setNextFocusableComponent(txtBillingExt2);
        txtBillingPhone2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBillingPhone2FocusGained(evt);
            }
        });

        txtBillingExt1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingExt1.setNextFocusableComponent(txtBillingPhone2);

        txtBillingExt2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingExt2.setNextFocusableComponent(txtBillingFax);

        txtBillingProv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingProv.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingProv.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingProv.setNextFocusableComponent(txtBillingPostalCode);
        txtBillingProv.setPreferredSize(new java.awt.Dimension(68, 17));

        txtBillingFax.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingFax.setText("xxx-xxx-xxxx");
        txtBillingFax.setToolTipText("");
        txtBillingFax.setNextFocusableComponent(txtBillingEmail);
        txtBillingFax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBillingFaxFocusGained(evt);
            }
        });

        txtBillingEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingEmail.setNextFocusableComponent(txtBillingDept);

        txtBillingCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingCity.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingCity.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingCity.setNextFocusableComponent(txtBillingProv);
        txtBillingCity.setPreferredSize(new java.awt.Dimension(68, 17));
        txtBillingCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBillingCityFocusLost(evt);
            }
        });
        txtBillingCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingCityKeyPressed(evt);
            }
        });

        txtBillingPostalCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingPostalCode.setText("A1A 1A1");
        txtBillingPostalCode.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingPostalCode.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingPostalCode.setNextFocusableComponent(txtBillingContact);
        txtBillingPostalCode.setPreferredSize(new java.awt.Dimension(68, 17));
        txtBillingPostalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBillingPostalCodeFocusGained(evt);
            }
        });

        txtBillingStreet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingStreet.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingStreet.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingStreet.setNextFocusableComponent(txtBillingCity);
        txtBillingStreet.setPreferredSize(new java.awt.Dimension(68, 17));
        txtBillingStreet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBillingStreetFocusLost(evt);
            }
        });
        txtBillingStreet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingStreetKeyPressed(evt);
            }
        });

        txtBillingAlias.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingAlias.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingAlias.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingAlias.setNextFocusableComponent(txtBillingStreet);
        txtBillingAlias.setPreferredSize(new java.awt.Dimension(68, 17));

        lblBillingDept.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingDept.setText("Department:");
        lblBillingDept.setToolTipText("");
        lblBillingDept.setEnabled(false);
        lblBillingDept.setFocusable(false);
        lblBillingDept.setRequestFocusEnabled(false);
        lblBillingDept.setVerifyInputWhenFocusTarget(false);

        lblBillingContract.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingContract.setText("Contract #:");
        lblBillingContract.setToolTipText("");
        lblBillingContract.setEnabled(false);
        lblBillingContract.setFocusable(false);
        lblBillingContract.setRequestFocusEnabled(false);
        lblBillingContract.setVerifyInputWhenFocusTarget(false);

        txtBillingDept.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingDept.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingDept.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingDept.setNextFocusableComponent(txtBillingContract);
        txtBillingDept.setPreferredSize(new java.awt.Dimension(68, 17));

        txtBillingContract.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingContract.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingContract.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingContract.setNextFocusableComponent(btnDocumentation);
        txtBillingContract.setPreferredSize(new java.awt.Dimension(68, 17));

        btnDocumentation.setText("Documentation");
        btnDocumentation.setNextFocusableComponent(txtPO);
        btnDocumentation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocumentationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBillingCustomerLayout = new javax.swing.GroupLayout(pnlBillingCustomer);
        pnlBillingCustomer.setLayout(pnlBillingCustomerLayout);
        pnlBillingCustomerLayout.setHorizontalGroup(
            pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBillingName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBillingAlias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBillingStreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBillingCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBillingContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBillingPhone1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBillingPhone2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addComponent(txtBillingPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblBillingExt2))
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addComponent(txtBillingPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblBillingExt1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addComponent(txtBillingExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblBillingEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addComponent(txtBillingExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblBillingFax, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txtBillingFax, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtBillingEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtBillingAlias, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBillingStreet, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBillingContact, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlBillingCustomerLayout.createSequentialGroup()
                            .addComponent(txtBillingCity, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblBillingProv)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtBillingProv, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblBillingPostalCode)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtBillingPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtBillingName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblBillingContract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBillingDept, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtBillingDept, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(txtBillingContract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(48, 48, 48)
                .addComponent(btnDocumentation, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBillingCustomerLayout.setVerticalGroup(
            pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBillingProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBillingPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingDept, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingDept, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingContract, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingContract, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBillingExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBillingEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnDocumentation)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlBillingCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblBillingAlias, lblBillingCity, lblBillingContact, lblBillingName, lblBillingPhone1, lblBillingPhone2, lblBillingStreet});

        pnlBillingCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBillingAlias, txtBillingCity, txtBillingContact, txtBillingEmail, txtBillingExt1, txtBillingExt2, txtBillingFax, txtBillingName, txtBillingPhone1, txtBillingPhone2, txtBillingPostalCode, txtBillingProv, txtBillingStreet});

        pnlCustomer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Info:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlCustomer.setFocusable(false);
        pnlCustomer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pnlCustomer.setRequestFocusEnabled(false);
        pnlCustomer.setVerifyInputWhenFocusTarget(false);

        lblName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblName.setText("Customer Name:");
        lblName.setToolTipText("");
        lblName.setEnabled(false);
        lblName.setFocusable(false);
        lblName.setRequestFocusEnabled(false);
        lblName.setVerifyInputWhenFocusTarget(false);

        lblStreet.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblStreet.setText("Street:");
        lblStreet.setEnabled(false);
        lblStreet.setFocusable(false);
        lblStreet.setRequestFocusEnabled(false);
        lblStreet.setVerifyInputWhenFocusTarget(false);

        lblCity.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCity.setText("City:");
        lblCity.setToolTipText("");
        lblCity.setEnabled(false);
        lblCity.setFocusable(false);
        lblCity.setRequestFocusEnabled(false);
        lblCity.setVerifyInputWhenFocusTarget(false);

        lblContact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblContact.setText("Contact Name:");
        lblContact.setToolTipText("");
        lblContact.setEnabled(false);
        lblContact.setFocusable(false);
        lblContact.setMaximumSize(new java.awt.Dimension(69, 17));
        lblContact.setMinimumSize(new java.awt.Dimension(69, 17));
        lblContact.setPreferredSize(new java.awt.Dimension(69, 17));
        lblContact.setRequestFocusEnabled(false);
        lblContact.setVerifyInputWhenFocusTarget(false);

        lblPhone1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPhone1.setText("Phone #2:");
        lblPhone1.setToolTipText("");
        lblPhone1.setEnabled(false);
        lblPhone1.setFocusable(false);
        lblPhone1.setRequestFocusEnabled(false);
        lblPhone1.setVerifyInputWhenFocusTarget(false);

        lblPhone2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPhone2.setText("Phone #1:");
        lblPhone2.setToolTipText("");
        lblPhone2.setEnabled(false);
        lblPhone2.setFocusable(false);
        lblPhone2.setRequestFocusEnabled(false);
        lblPhone2.setVerifyInputWhenFocusTarget(false);

        lblExt1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblExt1.setText("Ext:");
        lblExt1.setToolTipText("");
        lblExt1.setEnabled(false);
        lblExt1.setFocusable(false);
        lblExt1.setRequestFocusEnabled(false);
        lblExt1.setVerifyInputWhenFocusTarget(false);

        lblExt2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblExt2.setText("Ext:");
        lblExt2.setToolTipText("");
        lblExt2.setEnabled(false);
        lblExt2.setFocusable(false);
        lblExt2.setRequestFocusEnabled(false);
        lblExt2.setVerifyInputWhenFocusTarget(false);

        lblProv.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblProv.setText("Prov:");
        lblProv.setToolTipText("");
        lblProv.setEnabled(false);
        lblProv.setFocusable(false);
        lblProv.setRequestFocusEnabled(false);
        lblProv.setVerifyInputWhenFocusTarget(false);

        lblFax.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblFax.setText("Fax #:");
        lblFax.setToolTipText("");
        lblFax.setEnabled(false);
        lblFax.setFocusable(false);
        lblFax.setRequestFocusEnabled(false);
        lblFax.setVerifyInputWhenFocusTarget(false);

        lblEmail.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblEmail.setText("Email:");
        lblEmail.setToolTipText("");
        lblEmail.setEnabled(false);
        lblEmail.setFocusable(false);
        lblEmail.setRequestFocusEnabled(false);
        lblEmail.setVerifyInputWhenFocusTarget(false);

        lblPostalCode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPostalCode.setText("Postal Code:");
        lblPostalCode.setToolTipText("");
        lblPostalCode.setEnabled(false);
        lblPostalCode.setFocusable(false);
        lblPostalCode.setRequestFocusEnabled(false);
        lblPostalCode.setVerifyInputWhenFocusTarget(false);

        lblStreetInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblStreetInfo.setText("Address Info:");
        lblStreetInfo.setEnabled(false);
        lblStreetInfo.setFocusable(false);
        lblStreetInfo.setRequestFocusEnabled(false);
        lblStreetInfo.setVerifyInputWhenFocusTarget(false);

        lblNameInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNameInfo.setText("Additional Details:");
        lblNameInfo.setToolTipText("");
        lblNameInfo.setEnabled(false);
        lblNameInfo.setFocusable(false);
        lblNameInfo.setRequestFocusEnabled(false);
        lblNameInfo.setVerifyInputWhenFocusTarget(false);

        lblUnit.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUnit.setText("Unit/Apt#:");
        lblUnit.setToolTipText("");
        lblUnit.setEnabled(false);
        lblUnit.setFocusable(false);
        lblUnit.setRequestFocusEnabled(false);
        lblUnit.setVerifyInputWhenFocusTarget(false);

        txtCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtCustomer.setNextFocusableComponent(txtCustInfo);
        txtCustomer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustomerFocusLost(evt);
            }
        });
        txtCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustomerKeyPressed(evt);
            }
        });

        txtContact.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtContact.setNextFocusableComponent(txtPhone1);

        txtPhone1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPhone1.setText("xxx-xxx-xxxx");
        txtPhone1.setToolTipText("");
        txtPhone1.setNextFocusableComponent(txtExt1);
        txtPhone1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPhone1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPhone1FocusLost(evt);
            }
        });
        txtPhone1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPhone1KeyPressed(evt);
            }
        });

        txtPhone2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPhone2.setText("xxx-xxx-xxxx");
        txtPhone2.setToolTipText("");
        txtPhone2.setNextFocusableComponent(txtExt2);
        txtPhone2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPhone2FocusGained(evt);
            }
        });

        txtExt1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtExt1.setNextFocusableComponent(txtPhone2);

        txtExt2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtExt2.setNextFocusableComponent(txtFax);

        txtProv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtProv.setNextFocusableComponent(txtPostalCode);

        txtFax.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtFax.setText("xxx-xxx-xxxx");
        txtFax.setToolTipText("");
        txtFax.setNextFocusableComponent(txtEmail);
        txtFax.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFaxFocusGained(evt);
            }
        });

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtEmail.setNextFocusableComponent(txtBillingName);

        txtCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCity.setNextFocusableComponent(txtProv);
        txtCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCityFocusLost(evt);
            }
        });
        txtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCityKeyPressed(evt);
            }
        });

        txtPostalCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPostalCode.setText("A1A 1A1");
        txtPostalCode.setNextFocusableComponent(txtContact);
        txtPostalCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPostalCodeFocusGained(evt);
            }
        });

        txtStreet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtStreet.setNextFocusableComponent(txtUnit);
        txtStreet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStreetFocusLost(evt);
            }
        });
        txtStreet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStreetKeyPressed(evt);
            }
        });

        txtStreetInfo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtStreetInfo.setNextFocusableComponent(txtCity);

        txtCustInfo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCustInfo.setNextFocusableComponent(txtStreet);

        txtUnit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtUnit.setNextFocusableComponent(txtStreetInfo);

        lblBundled.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBundled.setText("Bundled:");
        lblBundled.setToolTipText("");
        lblBundled.setEnabled(false);
        lblBundled.setFocusable(false);
        lblBundled.setRequestFocusEnabled(false);
        lblBundled.setVerifyInputWhenFocusTarget(false);

        lblAvailBundles.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblAvailBundles.setText("Bundle #:");
        lblAvailBundles.setToolTipText("");
        lblAvailBundles.setEnabled(false);
        lblAvailBundles.setFocusable(false);
        lblAvailBundles.setRequestFocusEnabled(false);
        lblAvailBundles.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnlCustomerLayout = new javax.swing.GroupLayout(pnlCustomer);
        pnlCustomer.setLayout(pnlCustomerLayout);
        pnlCustomerLayout.setHorizontalGroup(
            pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerLayout.createSequentialGroup()
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNameInfo)
                    .addComponent(lblStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStreetInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPhone2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPhone1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBundled, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPhone2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(txtPhone1))
                            .addComponent(cbBundle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCustomerLayout.createSequentialGroup()
                                .addComponent(lblExt1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblFax, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlCustomerLayout.createSequentialGroup()
                                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                                        .addComponent(lblExt2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblAvailBundles, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                                        .addComponent(cmbBundles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap())
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustomerLayout.createSequentialGroup()
                                        .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtFax, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCustInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStreetInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustomerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustomerLayout.createSequentialGroup()
                                .addComponent(lblProv)
                                .addGap(4, 4, 4)
                                .addComponent(txtProv, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(lblPostalCode)
                                .addGap(4, 4, 4)
                                .addComponent(txtPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtContact, txtCustInfo, txtCustomer, txtStreetInfo});

        pnlCustomerLayout.setVerticalGroup(
            pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerLayout.createSequentialGroup()
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCustInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblStreetInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStreetInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbBundle)
                            .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbBundles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblAvailBundles, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBundled, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblStreetInfo, txtStreetInfo});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblStreet, txtStreet});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblUnit, txtUnit});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblName, lblNameInfo, txtCustInfo, txtCustomer});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblContact, txtContact});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblCity, txtCity});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblAvailBundles, lblBundled, lblEmail, lblExt1, lblExt2, lblFax, lblPhone1, lblPhone2});

        lblUnit.getAccessibleContext().setAccessibleName("Unit#:");

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBillingCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBillingCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        pnlDetails.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPO.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPO.setText("PO#:");
        lblPO.setToolTipText("");
        lblPO.setEnabled(false);
        lblPO.setFocusable(false);
        lblPO.setRequestFocusEnabled(false);
        lblPO.setVerifyInputWhenFocusTarget(false);

        txtPO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPO.setNextFocusableComponent(btngrpPerService);

        pnlFreq.setBorder(javax.swing.BorderFactory.createTitledBorder("Invoice Frequency:"));
        pnlFreq.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        btngrpPerService.setSelected(true);
        btngrpPerService.setText("Per Service Request");
        btngrpPerService.setNextFocusableComponent(btngrpMonthly);
        btngrpPerService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btngrpPerServiceMousePressed(evt);
            }
        });

        btngrpMonthly.setText("Net 30");
        btngrpMonthly.setNextFocusableComponent(rbCheck);
        btngrpMonthly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btngrpMonthlyMousePressed(evt);
            }
        });

        javax.swing.GroupLayout pnlFreqLayout = new javax.swing.GroupLayout(pnlFreq);
        pnlFreq.setLayout(pnlFreqLayout);
        pnlFreqLayout.setHorizontalGroup(
            pnlFreqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFreqLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btngrpPerService)
                .addGap(53, 53, 53)
                .addComponent(btngrpMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFreqLayout.setVerticalGroup(
            pnlFreqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFreqLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(pnlFreqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btngrpPerService)
                    .addComponent(btngrpMonthly))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlDetailsLayout = new javax.swing.GroupLayout(pnlDetails);
        pnlDetails.setLayout(pnlDetailsLayout);
        pnlDetailsLayout.setHorizontalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPO, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtPO, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlDetailsLayout.setVerticalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFreq, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(pnlDetailsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblPO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPO, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(16, 16, 16))
        );

        pnlPayment.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Info:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlPayment.setPreferredSize(new java.awt.Dimension(1112, 122));
        pnlPayment.setRequestFocusEnabled(false);

        rbCheck.setSelected(true);
        rbCheck.setText("Check");
        rbCheck.setNextFocusableComponent(rbMastercard);
        rbCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCheckActionPerformed(evt);
            }
        });

        rbVisa.setText("VISA");
        rbVisa.setNextFocusableComponent(rbPcard);
        rbVisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbVisaActionPerformed(evt);
            }
        });

        rbMastercard.setText("Mastercard");
        rbMastercard.setNextFocusableComponent(rbOthers);
        rbMastercard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMastercardActionPerformed(evt);
            }
        });

        rbPcard.setText("P-card");
        rbPcard.setActionCommand("Pcard");
        rbPcard.setNextFocusableComponent(rbInSuit);
        rbPcard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPcardActionPerformed(evt);
            }
        });

        rbOthers.setText("Others");
        rbOthers.setNextFocusableComponent(rbVisa);
        rbOthers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOthersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPaymentLayout = new javax.swing.GroupLayout(pnlPayment);
        pnlPayment.setLayout(pnlPaymentLayout);
        pnlPaymentLayout.setHorizontalGroup(
            pnlPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(rbCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbMastercard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbOthers, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbVisa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbPcard, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        pnlPaymentLayout.setVerticalGroup(
            pnlPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCheck)
                    .addComponent(rbMastercard)
                    .addComponent(rbOthers)
                    .addComponent(rbVisa)
                    .addComponent(rbPcard))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlService.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Service Type:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlService.setPreferredSize(new java.awt.Dimension(1112, 59));

        rbEmergency.setText("Emergency Service");
        rbEmergency.setNextFocusableComponent(rbBlock);
        rbEmergency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEmergencyActionPerformed(evt);
            }
        });

        rbBlock.setText("Block Treatment/Total Building Treatment");
        rbBlock.setNextFocusableComponent(rbRegular);
        rbBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBlockActionPerformed(evt);
            }
        });

        rbRegular.setLabel("Regular Service - Common Area");
        rbRegular.setNextFocusableComponent(rbNew);
        rbRegular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbRegularActionPerformed(evt);
            }
        });

        rbNew.setFocusTraversalPolicyProvider(true);
        rbNew.setLabel("New");
        rbNew.setNextFocusableComponent(rbProduct);
        rbNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNewActionPerformed(evt);
            }
        });

        rbProduct.setLabel("Product");
        rbProduct.setNextFocusableComponent(rbOther);
        rbProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbProductActionPerformed(evt);
            }
        });

        rbFollowup.setLabel("Follow-up");
        rbFollowup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFollowupActionPerformed(evt);
            }
        });

        rbOther.setLabel("Other(Preparation,Proofing, OdourControl...) ");
        rbOther.setNextFocusableComponent(rbAM);
        rbOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOtherActionPerformed(evt);
            }
        });

        rbInSuit.setSelected(true);
        rbInSuit.setText("In Suit Regular Service Day");
        rbInSuit.setActionCommand("");
        rbInSuit.setNextFocusableComponent(rbEmergency);
        rbInSuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInSuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlServiceLayout = new javax.swing.GroupLayout(pnlService);
        pnlService.setLayout(pnlServiceLayout);
        pnlServiceLayout.setHorizontalGroup(
            pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServiceLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbEmergency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbInSuit))
                .addGap(85, 85, 85)
                .addGroup(pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbBlock)
                    .addComponent(rbRegular))
                .addGap(85, 85, 85)
                .addGroup(pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbNew)
                    .addComponent(rbProduct))
                .addGap(85, 85, 85)
                .addGroup(pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbOther)
                    .addComponent(rbFollowup))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlServiceLayout.setVerticalGroup(
            pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServiceLayout.createSequentialGroup()
                .addGroup(pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbBlock)
                    .addComponent(rbNew)
                    .addComponent(rbFollowup)
                    .addComponent(rbInSuit))
                .addGap(7, 7, 7)
                .addGroup(pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEmergency)
                    .addComponent(rbRegular)
                    .addComponent(rbProduct)
                    .addComponent(rbOther))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pnlSchedule.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Schedule:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlSchedule.setPreferredSize(new java.awt.Dimension(1112, 61));

        pnlPartOfDay.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rbAM.setText("AM");
        rbAM.setNextFocusableComponent(rbPM);
        rbAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAMActionPerformed(evt);
            }
        });

        rbPM.setText("PM");
        rbPM.setNextFocusableComponent(rbAnytime);
        rbPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPMActionPerformed(evt);
            }
        });

        rbAnytime.setSelected(true);
        rbAnytime.setText("Anytime");
        rbAnytime.setNextFocusableComponent(jCalendar1);
        rbAnytime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAnytimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPartOfDayLayout = new javax.swing.GroupLayout(pnlPartOfDay);
        pnlPartOfDay.setLayout(pnlPartOfDayLayout);
        pnlPartOfDayLayout.setHorizontalGroup(
            pnlPartOfDayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPartOfDayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPartOfDayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbAM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbAnytime, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlPartOfDayLayout.setVerticalGroup(
            pnlPartOfDayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPartOfDayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbAM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbPM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbAnytime)
                .addContainerGap())
        );

        jCalendar1.setNextFocusableComponent(btnCancel);
        jCalendar1.setWeekOfYearVisible(false);
        jCalendar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCalendar1MouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCalendar1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlScheduleLayout = new javax.swing.GroupLayout(pnlSchedule);
        pnlSchedule.setLayout(pnlScheduleLayout);
        pnlScheduleLayout.setHorizontalGroup(
            pnlScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScheduleLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(pnlPartOfDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlScheduleLayout.setVerticalGroup(
            pnlScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlScheduleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlPartOfDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
            .addGroup(pnlScheduleLayout.createSequentialGroup()
                .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );

        pnlActions.setEnabled(false);
        pnlActions.setPreferredSize(new java.awt.Dimension(1112, 60));

        btnCancel.setText("Cancel");
        btnCancel.setToolTipText("Return to Main Menu page");
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.setNextFocusableComponent(btnSave);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.setToolTipText("");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.setNextFocusableComponent(btnNext);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlActionsLayout = new javax.swing.GroupLayout(pnlActions);
        pnlActions.setLayout(pnlActionsLayout);
        pnlActionsLayout.setHorizontalGroup(
            pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionsLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(341, 341, 341)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 445, Short.MAX_VALUE)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        pnlActionsLayout.setVerticalGroup(
            pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionsLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 1197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlActions, javax.swing.GroupLayout.PREFERRED_SIZE, 1188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(pnlSchedule, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1178, Short.MAX_VALUE)
                        .addComponent(pnlService, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1178, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(pnlDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pnlPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 548, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlService, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlActions, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    String Freq = "";
    String ServiceType = "";
    String Payment = "";
    String strInput = "";
    String DaySched = "";
    Integer CustID = null;
    Integer BusinessID = null;
    Integer DeptID = null;
    public static String ServiceReqNr = null;
    String FollowupCnt = "";
    
    public static String CustomerType = "";
    public static String BID = "";
    
    Statement stmt ;
    String sqlStmt = "";
    String tblName = "";
    ResultSet rs_count = null;
    ResultSet rs = null;
            
    private void grpFreq( ) {
        ButtonGroup bgFreq = new ButtonGroup( );
        bgFreq.add(btngrpPerService);
        bgFreq.add(btngrpMonthly);
    }
    private void grpServType(){
        ButtonGroup bgServType = new ButtonGroup( );
        bgServType.add(rbEmergency);
        bgServType.add(rbRegular);
        bgServType.add(rbInSuit);
        bgServType.add(rbBlock);
        bgServType.add(rbNew);
        bgServType.add(rbProduct);
        bgServType.add(rbFollowup);
        bgServType.add(rbOther);
    }
    private void grpPayment(){
        ButtonGroup bgPayment = new ButtonGroup( );
        bgPayment.add(rbVisa);
        bgPayment.add(rbCheck);
        bgPayment.add(rbMastercard);
        bgPayment.add(rbPcard);
        bgPayment.add(rbOthers);
    }
    private void grpSchedule( ) {
        ButtonGroup rbSchedule = new ButtonGroup( );
        rbSchedule.add(rbAM);
        rbSchedule.add(rbPM);
        rbSchedule.add(rbAnytime);
    }
    
    private void disable_form(){
        System.out.println("disable_form");
        for (Component cp : pnlCustomer.getComponents() ){
            cp.setEnabled(false);
        }
        for (Component cp : pnlBillingCustomer.getComponents() ){
            cp.setEnabled(false);
        }
        for (Component cp : pnlDetails.getComponents() ){
            cp.setEnabled(false);
        }
        for (Component cp : pnlFreq.getComponents() ){
            cp.setEnabled(false);
        }
        for (Component cp : pnlPayment.getComponents() ){
            cp.setEnabled(false);
        }
        for (Component cp : pnlService.getComponents() ){
            cp.setEnabled(false);
        }
        for (Component cp : pnlSchedule.getComponents() ){
            cp.setEnabled(false);
        }
        //pnlBillingCustomer.setEnabled(false);
        //pnlCustomer.setEnabled(false);
        
        btnSave.setEnabled(false);
        btnNext.setEnabled(false);
        txtCustomer.setEnabled(true);
        /*
        lblBundled.setVisible(false);
        cbBundle.setVisible(false);
        lblAvailBundles.setVisible(false);
        cmbBundles.setVisible(false);
        */
    }
   
    private void btngrpPerServiceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btngrpPerServiceMousePressed
        // TODO add your handling code here:
        if (btngrpPerService.isSelected()){
            Freq = btngrpPerService.getText();
        }
    }//GEN-LAST:event_btngrpPerServiceMousePressed

    private void btngrpMonthlyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btngrpMonthlyMousePressed
        // TODO add your handling code here:
        if (btngrpMonthly.isSelected()){
            Freq = btngrpMonthly.getText();
        }
    }//GEN-LAST:event_btngrpMonthlyMousePressed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        MainMenu regFace = new MainMenu();
	regFace.setSize(700,800);
	regFace.setLocationRelativeTo(null);
	regFace.setResizable(false);
	dispose();
	regFace.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void rbEmergencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEmergencyActionPerformed
        if (rbEmergency.isSelected()){
            ServiceType = rbEmergency.getText();
        }
    }//GEN-LAST:event_rbEmergencyActionPerformed

    private void rbRegularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbRegularActionPerformed
        if (rbRegular.isSelected()){
            ServiceType = rbRegular.getText();
        }
    }//GEN-LAST:event_rbRegularActionPerformed

    private void rbBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBlockActionPerformed
        if (rbBlock.isSelected()){
            ServiceType = rbBlock.getText();
        }
    }//GEN-LAST:event_rbBlockActionPerformed

    private void rbNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNewActionPerformed
        if (rbNew.isSelected()){
            ServiceType = rbNew.getText();
        }
    }//GEN-LAST:event_rbNewActionPerformed

    private void rbProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbProductActionPerformed
        if (rbProduct.isSelected()){
            ServiceType = rbProduct.getText();
        }
    }//GEN-LAST:event_rbProductActionPerformed

    private void rbFollowupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFollowupActionPerformed
        if (rbFollowup.isSelected()){
            ServiceType = rbFollowup.getText();
            //FollowupDlg followup_dlg = new FollowupDlg();
            //followup_dlg.init();
            //followup_dlg.dispose();
        }
    }//GEN-LAST:event_rbFollowupActionPerformed

    private void rbOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOtherActionPerformed
        if (rbOther.isSelected()){
            ServiceType = rbOther.getText();
        }
    }//GEN-LAST:event_rbOtherActionPerformed

    private void rbInSuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInSuitActionPerformed
        if (rbInSuit.isSelected()){
            ServiceType = rbInSuit.getText();
        }
    }//GEN-LAST:event_rbInSuitActionPerformed

    private void rbVisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbVisaActionPerformed
        if (rbVisa.isSelected()){
            Payment = rbVisa.getText();
        }
    }//GEN-LAST:event_rbVisaActionPerformed

    private void rbCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCheckActionPerformed
        if (rbCheck.isSelected()){
            Payment = rbCheck.getText();
        }
    }//GEN-LAST:event_rbCheckActionPerformed

    private void rbMastercardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMastercardActionPerformed
        if (rbMastercard.isSelected()){
            Payment = rbMastercard.getText();
        }
    }//GEN-LAST:event_rbMastercardActionPerformed

    private void rbPcardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPcardActionPerformed
        if (rbPcard.isSelected()){
            Payment = rbPcard.getText();
        }
    }//GEN-LAST:event_rbPcardActionPerformed

    private void rbOthersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOthersActionPerformed
        if (rbOthers.isSelected()){
            Payment = rbOthers.getText();
        }
    }//GEN-LAST:event_rbOthersActionPerformed

    public class CustDlg extends JFrame implements ActionListener{
        JLabel Lbl = new JLabel("Is this a new Customer?");
        JPanel AskPanel = new JPanel();
        JButton BtnYes = new JButton("Yes");
        JButton BtnNo = new JButton("No");
        private JDialog Dlg = new JDialog((ServiceReceipt) null,"Question",true);
        
        
        public void init()
        {
            Container DlgCntnr = Dlg.getContentPane();
            DlgCntnr.setLayout(new FlowLayout());
            DlgCntnr.add(Lbl);
            AskPanel.add(BtnYes);
            AskPanel.add(BtnNo);
            DlgCntnr.add(AskPanel);
            BtnYes.addActionListener(this);
            BtnNo.addActionListener(this);
            //Dlg.setBounds(220, 160, 220, 170);
            Dlg.setSize(220, 100);
            Dlg.setLocationRelativeTo(null);
            Dlg.show();
        }
        public void dispose()
        {
            Dlg.dispose();
        }
        public void actionPerformed(ActionEvent e1)
            {
                if(e1.getSource() == BtnYes)
                    {
                        CustomerType = "New";
                        Dlg.dispose();
                    }
                else //(e1.getSource() == BtnNo)
                    {
                        CustomerType = "Existing";
                        Dlg.dispose();
                    }
         }
    }
    
    public class SaveDlg extends JFrame implements ActionListener{
        JLabel Lbl = new JLabel("Are you sure you want to modify the customer info?");
        JPanel AskPanel = new JPanel();
        JButton BtnYes = new JButton("Yes");
        JButton BtnCancel = new JButton("Cancel");
        private JDialog Dlg = new JDialog((ServiceReceipt) null,"Update Customer Info", true);
        public void init()
        {
            Container DlgCntnr = Dlg.getContentPane();
            DlgCntnr.setLayout(new FlowLayout());
            DlgCntnr.add(Lbl);
            AskPanel.add(BtnYes);
            AskPanel.add(BtnCancel);
            DlgCntnr.add(AskPanel);
            BtnYes.addActionListener(this);
            BtnCancel.addActionListener(this);
            //Dlg.setBounds(220, 160, 220, 170);
            Dlg.setSize(300, 100);
            Dlg.setLocationRelativeTo(null);
            Dlg.setUndecorated(true);
            Dlg.getRootPane().setWindowDecorationStyle(1);
            Dlg.show();
        }
        public void dispose(){
            Dlg.dispose();
        }
        public void actionPerformed(ActionEvent e1){
            if(e1.getSource() == BtnYes)
                {
                    String bundle = "";
                    try{    
                        //get bundle info
                        if (cbBundle.isEnabled()){
                            bundle = cmbBundles.getSelectedItem().toString();
                        }
                        
                        //get user_id
                        sqlStmt = "SELECT User_ID from Users where user_name = '" + frmLogin.user_name + "'";
                        rs = SQLConnection.getRecordSet(sqlStmt);
                        Integer user_id = rs.getInt("User_ID");
                        sqlStmt = "UPDATE Customer SET CustomerName = '" + txtCustomer.getText() + "'," 
                                + " Notes = '" + txtCustInfo.getText() + "',"
                                + " Address = '" + txtStreet.getText() + "',"
                                + " AddressNotes = '" + txtStreetInfo.getText() + "',"
                                + " City = '" + txtCity.getText() + "',"
                                + " Province = '" + txtProv.getText() + "',"
                                + " PostalCode = '" + txtPostalCode.getText() + "',"
                                + " ContactName = '" + txtContact.getText() + "',"
                                + " PrimaryPhone = '" + txtPhone1.getText() + "',"
                                + " Ext = '" + txtExt1.getText() + "',"
                                + " SecondaryPhone = '" + txtPhone2.getText() + "',"
                                + " Ext2 = '" + txtExt2.getText() + "',"
                                + " Other = '',"
                                + " Fax = '" + txtFax.getText() + "',"
                                + " EmailAddress = '" + txtEmail.getText() + "',"
                                + " Bundle = '" + bundle + "',"
                                + " UpdateDate = '" + DateUtils.now() + "',"
                                + " UserID = '" + user_id + "'"
                                //+ " UserID = '(SELECT User_ID from Users where user_name = '" + frmLogin.user_name + "')'"
                                + " where cust_id = '" + CustID + "'";

                        System.out.println(sqlStmt);
                        int updateCust = SQLConnection.updateRecordSet(sqlStmt);
                        
                        //update Billing info
                        if (BusinessID > 0) {
                            //need to add new bundle if it was updated
                            sqlStmt = "SELECT count(*) as num from Bundles where BundleName = '" + bundle 
                                    + "' and BID = '" + BusinessID + "'";
                            rs = SQLConnection.getRecordSet(sqlStmt);
                            System.out.println("count is: " + rs.getInt("num"));
                            if (rs.getInt("num") == 0){
                                sqlStmt = "INSERT INTO Bundles (BID,BundleName) VALUES (?,?)";
                                System.out.println(sqlStmt);
                                PreparedStatement stmt = SQLConnection.conn.prepareStatement(sqlStmt);//"insert into Bundles (BID, BundleName) values (?, ?)");
                                //System.out.println("insert into Bundles (BID, BundleName) values (?, ?)");
                                stmt.setInt(1, BusinessID);
                                System.out.println("1");
                                stmt.setString(2, bundle);
                                System.out.println("2");
                                stmt.executeUpdate();
                                
                                //SQLConnection.insertRecordSet(sqlStmt);
                            }
                            
                            sqlStmt = "UPDATE Business_Details SET Name = '" + txtBillingName.getText() + "'," 
                                    + " Alias = '" + txtBillingAlias.getText() + "',"
                                    + " Address = '" + txtBillingStreet.getText() + "',"
                                    + " Notes = 'test',"
                                    + " City = '" + txtBillingCity.getText() + "',"
                                    + " Province = '" + txtBillingProv.getText() + "',"
                                    + " PostalCode = '" + txtBillingPostalCode.getText() + "'"
                                    + " where BID = '" + BusinessID + "'";

                            System.out.println(sqlStmt);
                            int updateBillingCust = SQLConnection.updateRecordSet(sqlStmt);
                        }
                        //if ((updateCust == 1) && (updateBillingCust == 1)){
                            //JOptionPane.showMessageDialog(null,"Customer Info Updated");
                            JOptionPane.showMessageDialog(null, "Customer Info Updated", "Success!!", 1);
                            Dlg.dispose();
                        //}

                    }
                    catch (SQLException ex) {
                        Logger.getLogger(ServiceReceipt.class.getName()).log(Level.SEVERE, null, ex);
                        //if (stmt != null) { stmt.close(); }
                        System.out.println("error");      
                    }
                }
            else {
                //CustomerType = "Existing";
                Dlg.dispose();
            }
        }
    }
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        //System.out.println("window activated");         
    }//GEN-LAST:event_formWindowActivated

    private void txtCustomerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerKeyPressed
        // TODO add your handling code here:
        String strInput= this.txtCustomer.getText();
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)  {
            if (CustomerType == "Existing"){
                //Statement stmt = null;
                System.out.println("key pressed 1");
                try {
                    System.out.println("conn success");
                    System.out.println("stmt ok " + strInput);
                    String sqlStmt = "select count(*) as num from Customer where CustomerName like '%" + strInput + "%'";
                    //String tblName = "Customer";
                    //rs = stmt.executeQuery(sqlStmt);
                    rs = SQLConnection.getRecordSet(sqlStmt);
                    System.out.println("stmt ok");
                    System.out.println("resultset " + sqlStmt);
                    //rs.next();
                    switch (rs.getInt("num")){
                        case 0:
                            JOptionPane.showMessageDialog(null,"There is no customer which have the Name containing '" + strInput + "'","",JOptionPane.ERROR_MESSAGE);
                            break;
                        case 1:
                            sqlStmt = "select * from Customer where CustomerName like '%" + strInput + "%'";
                            //tblName = "Customer";
                            rs = SQLConnection.getRecordSet(sqlStmt);
                            //rs.next();
                            fillInfo(rs);
                            btnNext.setEnabled(true);
                            btnSave.setEnabled(true);
                            break;
                        default:
                            System.out.println("multiple records");
                            sqlStmt = "select CustomerName, Address from Customer where CustomerName like '%" + strInput + "%'";
                            //String tblName = "Customer";
                            rs = SQLConnection.getMultipleRecordsRS(sqlStmt);
                            MultipleRecords MultipleCustomers = new MultipleRecords();
                            MultipleCustomers.init();
                            MultipleCustomers.dispose();
                            btnNext.setEnabled(true);
                            btnSave.setEnabled(true);
                            break;
                    }
                }
                    catch (SQLException ex) {
                    Logger.getLogger(ServiceReceipt.class.getName()).log(Level.SEVERE, null, ex);
                    //if (stmt != null) { stmt.close(); }
                    System.out.println("error");
                }    
            }
            else {
                System.out.println("new customer ");
                //check the name to be at least 5 characters
                if (txtCustomer.getText().length() >= 5){
                    for (Component cp : pnlCustomer.getComponents() ){
                        cp.setEnabled(true);
                    }
                    pnlCustomer.setEnabled(true);
                    txtBillingName.setEnabled(true);

                    /*
                    txtCustInfo.setEnabled(true);
                    txtStreet.setEnabled(true);
                    txtUnit.setEnabled(true);
                    txtStreetInfo.setEnabled(true);
                    txtCity.setEnabled(true);
                    txtProv.setEnabled(true);
                    txtPostalCode.setEnabled(true);
                    */
                }
                else{
                    JOptionPane.showMessageDialog(null,"Customer Name is less than 5 characters","Customer Name too short!!!",JOptionPane.ERROR_MESSAGE);
                }
            }
        }        
    }//GEN-LAST:event_txtCustomerKeyPressed

    private void txtStreetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStreetKeyPressed
        
        strInput = this.txtStreet.getText();
        
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            System.out.println("street1 :" + strInput);
            if (CustomerType == "Existing"){
                
                //System.out.println("key pressed 1");
                try {
                    //System.out.println("stmt ok");
                    sqlStmt = "select count(*) as num from Customer where Address like '%" + strInput + "%'";
                    //tblName = "Customer";
                    rs = SQLConnection.getRecordSet(sqlStmt);
                    System.out.println("resultset " + sqlStmt);
                    //rs.next();
                    switch (rs.getInt("num")){
                        case 0:
                            JOptionPane.showMessageDialog(null,"There is no customer which have the street containing '" + strInput + "'","",JOptionPane.ERROR_MESSAGE);
                            break;
                        case 1:
                            sqlStmt = "select * from Customer where Address like '%" + strInput + "%'";
                            rs = SQLConnection.getRecordSet(sqlStmt);
                            //rs.next();
                            fillInfo(rs);
                            btnNext.setEnabled(true);
                            btnSave.setEnabled(true);
                            break;
                        default:
                            System.out.println("multiple records");
                            String sqlStmt = "select CustomerName, Address from Customer where Address like '%" + strInput + "%'";
                            rs = SQLConnection.getMultipleRecordsRS(sqlStmt);
                            MultipleRecords MultipleCustomers = new MultipleRecords();
                            MultipleCustomers.init();
                            MultipleCustomers.dispose();
                            btnNext.setEnabled(true);
                            btnSave.setEnabled(true);
                            break;
                    }
                }
                    catch (SQLException ex) {
                    Logger.getLogger(ServiceReceipt.class.getName()).log(Level.SEVERE, null, ex);
                    //if (stmt != null) { stmt.close(); }
                    System.out.println("error");
                }
            }
            else {
                System.out.println("new customer");
                if (txtStreet.getText().length() <= 5){
                    JOptionPane.showMessageDialog(null,"Customer Street is less than 5 characters","Street Name too short!!!",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_txtStreetKeyPressed

    private void rbPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPMActionPerformed
        if (rbPM.isSelected()){
            DaySched = rbPM.getText();
        }
    }//GEN-LAST:event_rbPMActionPerformed

    private void rbAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAMActionPerformed
        if (rbAM.isSelected()){
            DaySched = rbAM.getText();
        }
    }//GEN-LAST:event_rbAMActionPerformed

    private void rbAnytimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAnytimeActionPerformed
        if (rbAnytime.isSelected()){
            DaySched = rbAnytime.getText();
        }
    }//GEN-LAST:event_rbAnytimeActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        SaveDlg save_dlg = new SaveDlg();
        save_dlg.init();
        save_dlg.dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        //we create the servicerequest and fill info in the Service_Request table
        create_service_request();
        //System.out.println("date is: " + jCalendar1.getCalendar().getTime().toString());
        
        CreateSRActivities SRActivities = new CreateSRActivities();
        SRActivities.setSize(800,600);
        SRActivities.setLocationRelativeTo(null);
        SRActivities.setResizable(false);
        SRActivities.setLayout(new BorderLayout());
        //dispose();
        this.setVisible(false);
        SRActivities.setVisible(true);
        System.out.println("here in ServiceReceipt");
        
        
    }//GEN-LAST:event_btnNextActionPerformed

    private void jCalendar1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCalendar1MouseReleased
        //txtDate.setText(jCalendar1.getCalendar().getTime().toString());
    }//GEN-LAST:event_jCalendar1MouseReleased

    private void btnDocumentationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocumentationActionPerformed
        Documentation frmDocumentation = new Documentation();
        frmDocumentation.setSize(380,380);
        frmDocumentation.setLocationRelativeTo(null);
        frmDocumentation.setResizable(false);
        dispose();
        frmDocumentation.setVisible(true);
        System.out.println("Documentation");
    }//GEN-LAST:event_btnDocumentationActionPerformed

    private void txtCityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCityKeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            if (CustomerType == "New"){
                if (txtCity.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null,"City is a mandatory field","City is Mandatory!!",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_txtCityKeyPressed

    private void txtPhone1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPhone1KeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) ) {
            if (CustomerType == "New"){
                if (txtPhone1.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null,"Phone # is a mandatory field","Phone# is Mandatory!!",JOptionPane.ERROR_MESSAGE);
                }
                else{
                    btnSave.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_txtPhone1KeyPressed

    private void jCalendar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCalendar1MouseClicked
        btnNext.setEnabled(true);
    }//GEN-LAST:event_jCalendar1MouseClicked

    private void txtCustomerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustomerFocusLost
        //temporary measure check a field is populated
        System.out.println("let's see value " + txtCity.toString().isEmpty() + " city");
        if (!txtCity.toString().isEmpty()){
        if (CustomerType == "Existing"){
            //Statement stmt = null;
            System.out.println("key pressed 1");
            try {
                //System.out.println("conn success");
                System.out.println("stmt ok " + strInput);
                String sqlStmt = "select count(*) as num from Customer where CustomerName like '%" + strInput + "%'";
                //String tblName = "Customer";
                //rs = stmt.executeQuery(sqlStmt);
                rs = SQLConnection.getRecordSet(sqlStmt);
                System.out.println("stmt ok");
                System.out.println("resultset " + sqlStmt);
                //rs.next();
                switch (rs.getInt("num")){
                    case 0:
                        JOptionPane.showMessageDialog(null,"There is no customer which have the Name containing '" + strInput + "'","",JOptionPane.ERROR_MESSAGE);
                        break;
                    case 1:
                        sqlStmt = "select * from Customer where CustomerName like '%" + strInput + "%'";
                        //tblName = "Customer";
                        rs = SQLConnection.getRecordSet(sqlStmt);
                        //rs.next();
                        fillInfo(rs);
                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        break;
                    default:
                        System.out.println("multiple records");
                        sqlStmt = "select CustomerName, Address from Customer where CustomerName like '%" + strInput + "%'";
                        //String tblName = "Customer";
                        rs = SQLConnection.getMultipleRecordsRS(sqlStmt);
                        MultipleRecords MultipleCustomers = new MultipleRecords();
                        MultipleCustomers.init();
                        MultipleCustomers.dispose();
                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        break;
                }
            }
                catch (SQLException ex) {
                Logger.getLogger(ServiceReceipt.class.getName()).log(Level.SEVERE, null, ex);
                //if (stmt != null) { stmt.close(); }
                System.out.println("error");
            }    
        }
        else{
            System.out.println("new customer " );
            //check the name to be at least 5 characters
            if (txtCustomer.getText().length() >= 5){
                for (Component cp : pnlCustomer.getComponents() ){
                    cp.setEnabled(true);
                }
                pnlCustomer.setEnabled(true);
                txtBillingName.setEnabled(true);
                btnSave.setEnabled(true);
                btnNext.setEnabled(true);
                txtCustInfo.requestFocus();


                /*
                txtCustInfo.setEnabled(true);
                txtStreet.setEnabled(true);
                txtUnit.setEnabled(true);
                txtStreetInfo.setEnabled(true);
                txtCity.setEnabled(true);
                txtProv.setEnabled(true);
                txtPostalCode.setEnabled(true);
                */
            }
            else{
                JOptionPane.showMessageDialog(null,"Customer Name is less than 5 characters","Customer Name too short!!!",JOptionPane.ERROR_MESSAGE);
                txtCustomer.requestFocus();
            }
        }
        }
    }//GEN-LAST:event_txtCustomerFocusLost

    private void txtStreetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStreetFocusLost
        if (txtStreet.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Street is a mandatory field","Street is Mandatory!!",JOptionPane.ERROR_MESSAGE);
            txtStreet.requestFocus();
        }
    }//GEN-LAST:event_txtStreetFocusLost

    private void txtCityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCityFocusLost
        if (txtCity.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"City is a mandatory field","City is Mandatory!!",JOptionPane.ERROR_MESSAGE);
            txtCity.requestFocus();
        }
    }//GEN-LAST:event_txtCityFocusLost

    private void txtPostalCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPostalCodeFocusGained
        txtPostalCode.selectAll();
    }//GEN-LAST:event_txtPostalCodeFocusGained

    private void txtPhone1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhone1FocusGained
        txtPhone1.selectAll();
    }//GEN-LAST:event_txtPhone1FocusGained

    private void txtPhone2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhone2FocusGained
        txtPhone2.selectAll();
    }//GEN-LAST:event_txtPhone2FocusGained

    private void txtFaxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFaxFocusGained
        txtFax.selectAll();
    }//GEN-LAST:event_txtFaxFocusGained

    private void txtBillingNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingNameFocusLost
        if (txtBillingName.getText().length() == 0){
                for (Component cp : pnlFreq.getComponents() ){
                    cp.setEnabled(true);
                    pnlFreq.requestFocus();
                }
                for (Component cp : pnlPayment.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlService.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlSchedule.getComponents() ){
                    cp.setEnabled(true);
                }
            }
            else if (txtBillingName.getText().length() > 3) {
                for (Component cp : pnlBillingCustomer.getComponents() ){
                    cp.setEnabled(true);
                    txtPO.setEnabled(true);
                    txtBillingAlias.requestFocus();
                }
                for (Component cp : pnlFreq.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlPayment.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlService.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlSchedule.getComponents() ){
                    cp.setEnabled(true);
                }
            }
            else{
                JOptionPane.showMessageDialog(null,"Billing Name is less than 4 characters","Billing Name too short!!!",JOptionPane.ERROR_MESSAGE);
                txtBillingName.requestFocus();
            }
            
    }//GEN-LAST:event_txtBillingNameFocusLost

    private void txtBillingNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (txtBillingName.getText().length() == 0){
                for (Component cp : pnlFreq.getComponents() ){
                    cp.setEnabled(true);
                    pnlFreq.requestFocus();
                }
                for (Component cp : pnlPayment.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlService.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlSchedule.getComponents() ){
                    cp.setEnabled(true);
                }
            }
            else if (txtBillingName.getText().length() > 3) {
                for (Component cp : pnlBillingCustomer.getComponents() ){
                    cp.setEnabled(true);
                    txtBillingAlias.requestFocus();
                }
                for (Component cp : pnlFreq.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlPayment.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlService.getComponents() ){
                    cp.setEnabled(true);
                }
                for (Component cp : pnlSchedule.getComponents() ){
                    cp.setEnabled(true);
                }
            }
            else{
                JOptionPane.showMessageDialog(null,"Billing Name is less than 4 characters","Billing Name too short!!!",JOptionPane.ERROR_MESSAGE);
                txtBillingName.requestFocus();
            }
        }
    }//GEN-LAST:event_txtBillingNameKeyPressed

    private void txtBillingPostalCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingPostalCodeFocusGained
        txtBillingPostalCode.selectAll();
    }//GEN-LAST:event_txtBillingPostalCodeFocusGained

    private void txtBillingPhone1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingPhone1FocusGained
        txtBillingPhone1.selectAll();
    }//GEN-LAST:event_txtBillingPhone1FocusGained

    private void txtBillingPhone2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingPhone2FocusGained
        txtBillingPhone2.selectAll();
    }//GEN-LAST:event_txtBillingPhone2FocusGained

    private void txtBillingFaxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingFaxFocusGained
        txtBillingFax.selectAll();
    }//GEN-LAST:event_txtBillingFaxFocusGained

    private void txtBillingStreetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingStreetFocusLost
        if (txtBillingStreet.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Billing Street is a mandatory field","Street is Mandatory!!",JOptionPane.ERROR_MESSAGE);
            txtBillingStreet.requestFocus();
        }
    }//GEN-LAST:event_txtBillingStreetFocusLost

    private void txtBillingCityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingCityFocusLost
        if (txtBillingCity.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Billing City is a mandatory field","City is Mandatory!!",JOptionPane.ERROR_MESSAGE);
            txtBillingCity.requestFocus();
        }
    }//GEN-LAST:event_txtBillingCityFocusLost

    private void txtBillingPhone1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBillingPhone1FocusLost
        if (txtBillingPhone1.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Billing Phone is a mandatory field","Phone is Mandatory!!",JOptionPane.ERROR_MESSAGE);
            txtBillingPhone1.requestFocus();
        }
    }//GEN-LAST:event_txtBillingPhone1FocusLost

    private void txtBillingStreetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingStreetKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (txtBillingStreet.getText().length() <= 5){
                JOptionPane.showMessageDialog(null,"Billing Street is less than 5 characters","Street Name too short!!!",JOptionPane.ERROR_MESSAGE);
                txtBillingStreet.requestFocus();
            }
        }
    }//GEN-LAST:event_txtBillingStreetKeyPressed

    private void txtBillingCityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingCityKeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER)) {
            if (CustomerType == "New"){
                if (txtBillingCity.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null,"Billing City is a mandatory field","City is Mandatory!!",JOptionPane.ERROR_MESSAGE);
                    txtBillingCity.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_txtBillingCityKeyPressed

    private void txtBillingPhone1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingPhone1KeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER)) {
            if (CustomerType == "New"){
                if (txtBillingPhone1.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null,"Billing Phone is a mandatory field","Phone is Mandatory!!",JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_txtBillingPhone1KeyPressed

    private void txtPhone1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPhone1FocusLost
        if (txtPhone1.getText().isEmpty() && txtPhone1.getText() != "xxx-xxx-xxxx" && txtPhone1.getText().length() != 12){
            JOptionPane.showMessageDialog(null,"Phone is a mandatory field","Phone is Mandatory!!",JOptionPane.ERROR_MESSAGE);
            txtPhone1.requestFocus();
        }
    }//GEN-LAST:event_txtPhone1FocusLost
    
    public class MultipleRecords extends JFrame implements ActionListener{
        JLabel Lbl = new JLabel("These customers match the search criteria. Please select one:");
        JPanel AskPanel = new JPanel();
        JButton BtnOK = new JButton("OK");
        JComboBox CustList = new JComboBox(); 
        JComboBox AddressList = new JComboBox(); 
        private JDialog Dlg = new JDialog((ServiceReceipt) null,"Dialog", true);
        public void init()
        {
            Container DlgCntnr = Dlg.getContentPane();
            DlgCntnr.setLayout(new FlowLayout());
            DlgCntnr.add(Lbl);
            DlgCntnr.add(CustList);
            //fill CustList with the records
            try {
                System.out.println("MultipleRecords " + sqlStmt);
                while (rs.next()){
                    CustList.addItem(makeObj(rs.getString("CustomerName") + " at " + rs.getString("Address")));
                }
            }
            catch (SQLException ex) {
                    Logger.getLogger(ServiceReceipt.class.getName()).log(Level.SEVERE, null, ex);
                    //if (stmt != null) { stmt.close(); }
                    System.out.println("error");      
            }
            AskPanel.add(BtnOK);
            DlgCntnr.add(AskPanel);
            BtnOK.addActionListener(this);
            //Dlg.setBounds(220, 160, 220, 170);
            Dlg.setSize(500, 150);
            Dlg.setLocationRelativeTo(null);
            Dlg.show();
        }
        private Object makeObj(final String item)  {
            return new Object() { public String toString() { return item; } };
        }
        public void dispose()
        {
            Dlg.dispose();
        }
        public void actionPerformed(ActionEvent e1){
            //System.out.println("actioned performed by ");      
            if(e1.getSource() == BtnOK){
                //return the item/recordset which was selected
                //System.out.println("actioned performed " + CustList.getSelectedItem().toString().replace(" at ", "|"));
                String new_String = CustList.getSelectedItem().toString().replace(" at ", "|");
                String delims = "[|]";
                String [] tokens = new_String.split(delims);
                //System.out.println("actioned " + tokens[0]);
                //System.out.println("another " + tokens[1]);
                
                sqlStmt = "select * from Customer where Address = '" + tokens[1] + "' and CustomerName = '" + tokens[0] + "'";
                rs = SQLConnection.getRecordSet(sqlStmt);
                fillInfo(rs);
                Dlg.dispose();
            }
        }
    }
    
    public void fillInfo(ResultSet rs){
        System.out.println("fillInfo");
        String strBundleValue = null;
        try {
            CustID = rs.getInt("cust_id");
            txtCustomer.setText(rs.getString("CustomerName"));
            String Notes = rs.getString("Notes");
            txtStreet.setText(rs.getString("Address"));
            String AddressNotes = rs.getString("AddressNotes");
            txtCity.setText(rs.getString("City"));
            txtProv.setText(rs.getString("Province"));
            txtPostalCode.setText(rs.getString("PostalCode"));
            txtContact.setText(rs.getString("ContactName"));
            txtPhone1.setText(rs.getString("PrimaryPhone"));
            txtExt1.setText(rs.getString("Ext"));
            txtPhone2.setText(rs.getString("SecondaryPhone"));
            txtExt2.setText(rs.getString("Ext2"));
            txtFax.setText(rs.getString("Fax"));
            txtEmail.setText(rs.getString("EmailAddress"));
            cbBundle.setSelected(false);
            System.out.println("bundle value:" + rs.getString("Bundle") + "");
            if ( rs.getString("Bundle").length() >0){
                System.out.println("bundle value: " + rs.getString("Bundle"));
                cbBundle.setSelected(true);
                //cbBundle.setEnabled(true);
                strBundleValue = rs.getString("Bundle");
            }
            
            if (rs.getInt("BID") != 0){
                BusinessID = rs.getInt("BID");
                BID = BusinessID.toString();
                sqlStmt = "select * from Business_Details where BID = '" + BusinessID + "'";
                //tblName = "Business_Details";
                rs = SQLConnection.getRecordSet(sqlStmt);
                //rs.next();
                txtBillingName.setText(rs.getString("Name"));
                txtBillingAlias.setText(rs.getString("Alias"));
                txtBillingStreet.setText(rs.getString("Address"));
                //txtBilling???.setText(rs.getString("Notes"));
                txtBillingCity.setText(rs.getString("City"));
                txtBillingProv.setText(rs.getString("Province"));
                txtBillingPostalCode.setText(rs.getString("PostalCode"));
                //txtBillingAlias.setText(rs.getString("Alias"));
                //remove items from the cmbBundles list
                cmbBundles.removeAllItems();
                cmbBundles.setEditable(true);
                sqlStmt = "select BundleName from Bundles where BID = '" + BusinessID + "'";
                //tblName = "Business_Details";
                rs = SQLConnection.getMultipleRecordsRS(sqlStmt);
                while (rs.next()){
                    //get available bundles
                    cmbBundles.addItem((String) (rs.getString("BundleName")));               
                }
                cmbBundles.setSelectedItem(strBundleValue);  
            }
            else{
                txtBillingName.setText("");
                txtBillingAlias.setText("");
                txtBillingStreet.setText("");
                //txtBilling???.setText("");
                txtBillingCity.setText("");
                txtBillingProv.setText("");
                txtBillingPostalCode.setText("");
            }
        }
         catch (SQLException ex) {
            Logger.getLogger(ServiceReceipt.class.getName()).log(Level.SEVERE, null, ex);
            //if (stmt != null) { stmt.close(); }
            System.out.println("error");      
            }
        
    }
    
    public void create_service_request(){
        try{
            
            sqlStmt = "INSERT INTO Service_Request "
                                   + "(Cust_id,BID,DeptID,PONr,Invoicing,Emergency,ServiceType,PaymentType,Schedule,ServiceDate,Creation_Date,Update_Date,User_id,ActivityCount) "
                                   + "values (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            System.out.println(sqlStmt);
            PreparedStatement stmt = SQLConnection.conn.prepareStatement(sqlStmt);
            //Integer ServiceReqNr generated by the db
            stmt.setInt(1, CustID);
            stmt.setInt(2, BusinessID);
            if (!txtBillingDept.getText().isEmpty()){
                System.out.println("DeptID=" + DeptID);
                String sqlStmt1 = "Select DeptID from Department WHERE DeptName = '" + txtBillingDept.getText() + "'";
                rs = SQLConnection.getRecordSet(sqlStmt1);
                DeptID = rs.getInt("DeptID");
                stmt.setInt(3,DeptID);
                System.out.println("DeptID=" + DeptID);
            }
            else{
                DeptID = 0;
                stmt.setInt(3,DeptID);
            }
            stmt.setString(4, txtPO.getText().toString());
            
            stmt.setString(5,Freq);
            if (ServiceType == "Emergency Service"){
                stmt.setString(6,"1");
            }
            else{
                stmt.setString(6,"0");
            }
            stmt.setString(7,ServiceType);
            stmt.setString(8,Payment);
            stmt.setString(9,DaySched);
            stmt.setString(10,jCalendar1.getCalendar().getTime().toString());
            stmt.setString(11,DateUtils.now());
            stmt.setString(12,DateUtils.now());
            stmt.setInt(13,frmLogin.user_id);        
            stmt.setInt(14,0);
            System.out.println("CustID:" + CustID + ";BusinessID:" + BusinessID + ";DeptID:" + DeptID + ";PO:" + txtPO.getText().toString() + ";Freq:" 
                    + Freq + ";ServiceType:" + ServiceType + ";Payment:" + Payment + ";DaySched:" + DaySched + ";Calendar:" 
                    + jCalendar1.getCalendar().getTime().toString() + ";Creation_date:" + DateUtils.now() + ";Update_date:" + DateUtils.now() 
                    + ";user_id:" + frmLogin.user_id);
            
            //stmt.executeUpdate();   

            //SQLConnection.conn.commit();
            //need to retrieve ServiceReqNr
            String sqlStmt1 = "Select ServiceReqNr from Service_Request WHERE User_id='" + frmLogin.user_id + "' AND ActivityCount = 0";
            //rs = SQLConnection.getRecordSet(sqlStmt);
            System.out.println("ServiceReqNr is: " + rs.getInt("ServiceReqNr"));
            //ServiceReqNr = rs.getString("ServiceReqNr");
            
        }
        catch(Exception e){
            //error to be captured!!!!
            //JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }
    
    public Object avoid_null(Object field_value){
        //String my_string;
        //my_string = (field_value == null) ? "": field_value.toString();
        return (field_value == null) ? "": field_value;//.toString();
        //return my_string;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDocumentation;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnSave;
    private javax.swing.JRadioButton btngrpMonthly;
    private javax.swing.JRadioButton btngrpPerService;
    private javax.swing.JCheckBox cbBundle;
    private javax.swing.JComboBox<String> cmbBundles;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAvailBundles;
    private javax.swing.JLabel lblBillingAlias;
    private javax.swing.JLabel lblBillingCity;
    private javax.swing.JLabel lblBillingContact;
    private javax.swing.JLabel lblBillingContract;
    private javax.swing.JLabel lblBillingDept;
    private javax.swing.JLabel lblBillingEmail;
    private javax.swing.JLabel lblBillingExt1;
    private javax.swing.JLabel lblBillingExt2;
    private javax.swing.JLabel lblBillingFax;
    private javax.swing.JLabel lblBillingName;
    private javax.swing.JLabel lblBillingPhone1;
    private javax.swing.JLabel lblBillingPhone2;
    private javax.swing.JLabel lblBillingPostalCode;
    private javax.swing.JLabel lblBillingProv;
    private javax.swing.JLabel lblBillingStreet;
    private javax.swing.JLabel lblBundled;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblExt1;
    private javax.swing.JLabel lblExt2;
    private javax.swing.JLabel lblFax;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNameInfo;
    private javax.swing.JLabel lblPO;
    private javax.swing.JLabel lblPhone1;
    private javax.swing.JLabel lblPhone2;
    private javax.swing.JLabel lblPostalCode;
    private javax.swing.JLabel lblProv;
    private javax.swing.JLabel lblStreet;
    private javax.swing.JLabel lblStreetInfo;
    private javax.swing.JLabel lblUnit;
    private javax.swing.JPanel pnlActions;
    private javax.swing.JPanel pnlBillingCustomer;
    private javax.swing.JPanel pnlCustomer;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JPanel pnlFreq;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlPartOfDay;
    private javax.swing.JPanel pnlPayment;
    private javax.swing.JPanel pnlSchedule;
    private javax.swing.JPanel pnlService;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JRadioButton rbAM;
    private javax.swing.JRadioButton rbAnytime;
    private javax.swing.JRadioButton rbBlock;
    private javax.swing.JRadioButton rbCheck;
    private javax.swing.JRadioButton rbEmergency;
    private javax.swing.JRadioButton rbFollowup;
    private javax.swing.JRadioButton rbInSuit;
    private javax.swing.JRadioButton rbMastercard;
    private javax.swing.JRadioButton rbNew;
    private javax.swing.JRadioButton rbOther;
    private javax.swing.JRadioButton rbOthers;
    private javax.swing.JRadioButton rbPM;
    private javax.swing.JRadioButton rbPcard;
    private javax.swing.JRadioButton rbProduct;
    private javax.swing.JRadioButton rbRegular;
    private javax.swing.JRadioButton rbVisa;
    private javax.swing.JTextField txtBillingAlias;
    private javax.swing.JTextField txtBillingCity;
    private javax.swing.JTextField txtBillingContact;
    private javax.swing.JTextField txtBillingContract;
    private javax.swing.JTextField txtBillingDept;
    private javax.swing.JTextField txtBillingEmail;
    private javax.swing.JTextField txtBillingExt1;
    private javax.swing.JTextField txtBillingExt2;
    private javax.swing.JTextField txtBillingFax;
    private javax.swing.JTextField txtBillingName;
    private javax.swing.JTextField txtBillingPhone1;
    private javax.swing.JTextField txtBillingPhone2;
    private javax.swing.JTextField txtBillingPostalCode;
    private javax.swing.JTextField txtBillingProv;
    private javax.swing.JTextField txtBillingStreet;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtCustInfo;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtExt1;
    private javax.swing.JTextField txtExt2;
    private javax.swing.JTextField txtFax;
    private javax.swing.JTextField txtPO;
    private javax.swing.JTextField txtPhone1;
    private javax.swing.JTextField txtPhone2;
    private javax.swing.JTextField txtPostalCode;
    private javax.swing.JTextField txtProv;
    private javax.swing.JTextField txtStreet;
    private javax.swing.JTextField txtStreetInfo;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables
}