package com.mycompany.propco_maven;

import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;

import org.hibernate.EmptyInterceptor;
import org.hibernate.Transaction;
import org.hibernate.type.Type;

import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.Serializable;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import org.hibernate.EmptyInterceptor;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import propco_maven.util.HibernateUtil;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dan.Mera
 */
//public class ServiceReceipt extends javax.swing.JPanel {
public class CreateSR extends javax.swing.JFrame {
    String Freq = "Per Service Request";
    String ServiceType = "In Suit Regular Service Day";
    String Payment = "Check";
    String strInput = "";
    String DaySched = "Anytime";
    Integer CustID = null;
    Integer BusinessID = null;
    Integer DeptID = null;
    String FollowupCnt = "";
    
    public static String CustomerType = "";
    public static String BID = "";
    
    Statement stmt ;
    String sqlStmt = "";
    String tblName = "";
    ResultSet rs_count = null;
    ResultSet rs = null;
    List resultList =null;
    List CustomerList = null;
    List BusinessList = null;
    
    private static String QUERY_BASED_ON_CUSTOMER_NAME = "from Customer c inner join fetch c.business inner join fetch c.users inner join fetch c.department inner join fetch c.bundles where c.customerName like '%";
    //private static String QUERY_BASED_ON_CUSTOMER_STREET="from Customer so inner join fetch so.business where so.address like '520%';
    private static String QUERY_BASED_ON_CUSTOMER_STREET = "from Customer c inner join fetch c.business inner join fetch c.users inner join fetch c.department inner join fetch c.bundles where c.address like '%";
    private static String QUERY_BASED_ON_BILLING_NAME = "from Business b inner join fetch b.users where b.name like '%";
    private static String QUERY_BASED_ON_DEPARTMENT = "from Department";
    private static String QUERY_BASED_ON_BUNDLES = "from Bundles";
    
    private static SessionFactory factory;
    private static Session session;
    private static Transaction tx;
    Customer new_customer = null;
    Business new_business = null;
    
    /**
     * Creates new form ServiceReceipt
     */
    public CreateSR() {
        System.out.println("===ServiceReceipt===");
        
        initComponents();
        //correct tab key functionality
        allow_vk_tab();
        grpFreq();
        grpServType();
        grpPayment();
        grpSchedule();
        CustDlg my_dlg = new CustDlg();
        my_dlg.init();
        my_dlg.dispose();
        if (CustomerType.equals("New")){disable_form();}
        initializeSession();
        System.out.println("this is a " + this.CustomerType + " customer!");
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlInfo = new javax.swing.JPanel();
        pnlBillingCustomer = new javax.swing.JPanel();
        lblBillingName = new javax.swing.JLabel();
        lblBillingStreet = new javax.swing.JLabel();
        lblBillingCity = new javax.swing.JLabel();
        lblBillingContact = new javax.swing.JLabel();
        lblBillingPhone1 = new javax.swing.JLabel();
        lblBillingPhone2 = new javax.swing.JLabel();
        lblBillingExt1 = new javax.swing.JLabel();
        lblBillingExt2 = new javax.swing.JLabel();
        lblBillingProv = new javax.swing.JLabel();
        lblBillingFax = new javax.swing.JLabel();
        lblBillingEmail = new javax.swing.JLabel();
        lblBillingPostalCode = new javax.swing.JLabel();
        lblBillingAlias = new javax.swing.JLabel();
        txtBillingName = new javax.swing.JTextField();
        txtBillingContact = new javax.swing.JTextField();
        txtBillingPhone1 = new javax.swing.JTextField();
        txtBillingPhone2 = new javax.swing.JTextField();
        txtBillingExt1 = new javax.swing.JTextField();
        txtBillingExt2 = new javax.swing.JTextField();
        txtBillingProv = new javax.swing.JTextField();
        txtBillingFax = new javax.swing.JTextField();
        txtBillingEmail = new javax.swing.JTextField();
        txtBillingCity = new javax.swing.JTextField();
        txtBillingPostalCode = new javax.swing.JTextField();
        txtBillingStreet = new javax.swing.JTextField();
        txtBillingAlias = new javax.swing.JTextField();
        lblBillingDept = new javax.swing.JLabel();
        lblBillingContract = new javax.swing.JLabel();
        btnDocumentation = new javax.swing.JButton();
        cmbDepartmentName = new javax.swing.JComboBox<>();
        cmbContractNr = new javax.swing.JComboBox<>();
        pnlCustomer = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblStreet = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblContact = new javax.swing.JLabel();
        lblPhone1 = new javax.swing.JLabel();
        lblPhone2 = new javax.swing.JLabel();
        lblExt1 = new javax.swing.JLabel();
        lblExt2 = new javax.swing.JLabel();
        lblProv = new javax.swing.JLabel();
        lblFax = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPostalCode = new javax.swing.JLabel();
        lblStreetInfo = new javax.swing.JLabel();
        lblNameInfo = new javax.swing.JLabel();
        lblUnit = new javax.swing.JLabel();
        txtCustomer = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        txtPhone1 = new javax.swing.JTextField();
        txtPhone2 = new javax.swing.JTextField();
        txtExt1 = new javax.swing.JTextField();
        txtExt2 = new javax.swing.JTextField();
        txtProv = new javax.swing.JTextField();
        txtFax = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtPostalCode = new javax.swing.JTextField();
        txtStreet = new javax.swing.JTextField();
        txtStreetInfo = new javax.swing.JTextField();
        txtCustInfo = new javax.swing.JTextField();
        txtUnit = new javax.swing.JTextField();
        lblBundled = new javax.swing.JLabel();
        cbBundle = new javax.swing.JCheckBox();
        lblAvailBundles = new javax.swing.JLabel();
        cmbBundles = new javax.swing.JComboBox<>();
        pnlDetails = new javax.swing.JPanel();
        lblPO = new javax.swing.JLabel();
        txtPO = new javax.swing.JTextField();
        pnlPayment = new javax.swing.JPanel();
        rbCheck = new javax.swing.JRadioButton();
        rbVisa = new javax.swing.JRadioButton();
        rbMastercard = new javax.swing.JRadioButton();
        rbPcard = new javax.swing.JRadioButton();
        rbOthers = new javax.swing.JRadioButton();
        pnlService = new javax.swing.JPanel();
        rbEmergency = new javax.swing.JRadioButton();
        rbBlock = new javax.swing.JRadioButton();
        rbRegular = new javax.swing.JRadioButton();
        rbNew = new javax.swing.JRadioButton();
        rbProduct = new javax.swing.JRadioButton();
        rbOther = new javax.swing.JRadioButton();
        rbInSuit = new javax.swing.JRadioButton();
        pnlSchedule = new javax.swing.JPanel();
        pnlPartOfDay = new javax.swing.JPanel();
        rbAM = new javax.swing.JRadioButton();
        rbPM = new javax.swing.JRadioButton();
        rbAnytime = new javax.swing.JRadioButton();
        pnlActions = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnlFreq = new javax.swing.JPanel();
        btngrpPerService = new javax.swing.JRadioButton();
        btngrpMonthly = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1100, 772));
        setMinimumSize(new java.awt.Dimension(1100, 772));
        setName("frmServiceReceipt"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1100, 772));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setText("Create Service Receipt");
        jLabel1.setFocusable(false);

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTitleLayout.createSequentialGroup()
                .addGap(421, 421, 421)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(421, 421, 421))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlBillingCustomer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Billing Info(only if different):", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlBillingCustomer.setFocusable(false);
        pnlBillingCustomer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pnlBillingCustomer.setMinimumSize(new java.awt.Dimension(100, 100));
        pnlBillingCustomer.setPreferredSize(new java.awt.Dimension(560, 250));
        pnlBillingCustomer.setRequestFocusEnabled(false);
        pnlBillingCustomer.setVerifyInputWhenFocusTarget(false);

        lblBillingName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingName.setText("Company:");
        lblBillingName.setToolTipText("");
        lblBillingName.setEnabled(false);
        lblBillingName.setFocusable(false);
        lblBillingName.setRequestFocusEnabled(false);
        lblBillingName.setVerifyInputWhenFocusTarget(false);

        lblBillingStreet.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingStreet.setText("Street:");
        lblBillingStreet.setEnabled(false);
        lblBillingStreet.setFocusable(false);
        lblBillingStreet.setRequestFocusEnabled(false);
        lblBillingStreet.setVerifyInputWhenFocusTarget(false);

        lblBillingCity.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingCity.setText("City:");
        lblBillingCity.setToolTipText("");
        lblBillingCity.setEnabled(false);
        lblBillingCity.setFocusable(false);
        lblBillingCity.setRequestFocusEnabled(false);
        lblBillingCity.setVerifyInputWhenFocusTarget(false);

        lblBillingContact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingContact.setText("Contact Name:");
        lblBillingContact.setToolTipText("");
        lblBillingContact.setEnabled(false);
        lblBillingContact.setFocusable(false);
        lblBillingContact.setRequestFocusEnabled(false);
        lblBillingContact.setVerifyInputWhenFocusTarget(false);

        lblBillingPhone1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingPhone1.setText("Phone #1:");
        lblBillingPhone1.setToolTipText("");
        lblBillingPhone1.setEnabled(false);
        lblBillingPhone1.setFocusable(false);
        lblBillingPhone1.setRequestFocusEnabled(false);
        lblBillingPhone1.setVerifyInputWhenFocusTarget(false);

        lblBillingPhone2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingPhone2.setText("Phone #2:");
        lblBillingPhone2.setToolTipText("");
        lblBillingPhone2.setEnabled(false);
        lblBillingPhone2.setFocusable(false);
        lblBillingPhone2.setRequestFocusEnabled(false);
        lblBillingPhone2.setVerifyInputWhenFocusTarget(false);

        lblBillingExt1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingExt1.setText("Ext:");
        lblBillingExt1.setToolTipText("");
        lblBillingExt1.setEnabled(false);
        lblBillingExt1.setFocusable(false);
        lblBillingExt1.setRequestFocusEnabled(false);
        lblBillingExt1.setVerifyInputWhenFocusTarget(false);

        lblBillingExt2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingExt2.setText("Ext:");
        lblBillingExt2.setToolTipText("");
        lblBillingExt2.setEnabled(false);
        lblBillingExt2.setFocusable(false);
        lblBillingExt2.setRequestFocusEnabled(false);
        lblBillingExt2.setVerifyInputWhenFocusTarget(false);

        lblBillingProv.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingProv.setText("Prov:");
        lblBillingProv.setToolTipText("");
        lblBillingProv.setEnabled(false);
        lblBillingProv.setFocusable(false);
        lblBillingProv.setRequestFocusEnabled(false);
        lblBillingProv.setVerifyInputWhenFocusTarget(false);

        lblBillingFax.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingFax.setText("Fax #:");
        lblBillingFax.setToolTipText("");
        lblBillingFax.setEnabled(false);
        lblBillingFax.setFocusable(false);
        lblBillingFax.setRequestFocusEnabled(false);
        lblBillingFax.setVerifyInputWhenFocusTarget(false);

        lblBillingEmail.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingEmail.setText("Email:");
        lblBillingEmail.setToolTipText("");
        lblBillingEmail.setEnabled(false);
        lblBillingEmail.setFocusable(false);
        lblBillingEmail.setRequestFocusEnabled(false);
        lblBillingEmail.setVerifyInputWhenFocusTarget(false);

        lblBillingPostalCode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingPostalCode.setText("Postal Code:");
        lblBillingPostalCode.setToolTipText("");
        lblBillingPostalCode.setEnabled(false);
        lblBillingPostalCode.setFocusable(false);
        lblBillingPostalCode.setRequestFocusEnabled(false);
        lblBillingPostalCode.setVerifyInputWhenFocusTarget(false);

        lblBillingAlias.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingAlias.setText("Alias:");
        lblBillingAlias.setToolTipText("");
        lblBillingAlias.setEnabled(false);
        lblBillingAlias.setFocusable(false);
        lblBillingAlias.setRequestFocusEnabled(false);
        lblBillingAlias.setVerifyInputWhenFocusTarget(false);

        txtBillingName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingName.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingName.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingName.setNextFocusableComponent(txtBillingAlias);
        txtBillingName.setPreferredSize(new java.awt.Dimension(68, 17));
        txtBillingName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingNameKeyPressed(evt);
            }
        });

        txtBillingContact.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingContact.setNextFocusableComponent(txtBillingPhone1);

        txtBillingPhone1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingPhone1.setText("xxx-xxx-xxxx");
        txtBillingPhone1.setToolTipText("");
        txtBillingPhone1.setNextFocusableComponent(txtBillingExt1);
        txtBillingPhone1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingPhone1KeyPressed(evt);
            }
        });

        txtBillingPhone2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingPhone2.setText("xxx-xxx-xxxx");
        txtBillingPhone2.setToolTipText("");
        txtBillingPhone2.setNextFocusableComponent(txtBillingExt2);

        txtBillingExt1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingExt1.setNextFocusableComponent(txtBillingPhone2);

        txtBillingExt2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingExt2.setNextFocusableComponent(txtBillingFax);

        txtBillingProv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingProv.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingProv.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingProv.setNextFocusableComponent(txtBillingPostalCode);
        txtBillingProv.setPreferredSize(new java.awt.Dimension(68, 17));

        txtBillingFax.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingFax.setText("xxx-xxx-xxxx");
        txtBillingFax.setToolTipText("");
        txtBillingFax.setNextFocusableComponent(txtBillingEmail);

        txtBillingEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtBillingCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingCity.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingCity.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingCity.setNextFocusableComponent(txtBillingProv);
        txtBillingCity.setPreferredSize(new java.awt.Dimension(68, 17));
        txtBillingCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingCityKeyPressed(evt);
            }
        });

        txtBillingPostalCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingPostalCode.setText("A1A 1A1");
        txtBillingPostalCode.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingPostalCode.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingPostalCode.setNextFocusableComponent(txtBillingContact);
        txtBillingPostalCode.setPreferredSize(new java.awt.Dimension(68, 17));

        txtBillingStreet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingStreet.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingStreet.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingStreet.setNextFocusableComponent(txtBillingCity);
        txtBillingStreet.setPreferredSize(new java.awt.Dimension(68, 17));
        txtBillingStreet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBillingStreetKeyPressed(evt);
            }
        });

        txtBillingAlias.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBillingAlias.setMaximumSize(new java.awt.Dimension(68, 17));
        txtBillingAlias.setMinimumSize(new java.awt.Dimension(68, 17));
        txtBillingAlias.setNextFocusableComponent(txtBillingStreet);
        txtBillingAlias.setPreferredSize(new java.awt.Dimension(68, 17));

        lblBillingDept.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingDept.setText("Department:");
        lblBillingDept.setToolTipText("");
        lblBillingDept.setEnabled(false);
        lblBillingDept.setFocusable(false);
        lblBillingDept.setRequestFocusEnabled(false);
        lblBillingDept.setVerifyInputWhenFocusTarget(false);

        lblBillingContract.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBillingContract.setText("Contract #:");
        lblBillingContract.setToolTipText("");
        lblBillingContract.setEnabled(false);
        lblBillingContract.setFocusable(false);
        lblBillingContract.setRequestFocusEnabled(false);
        lblBillingContract.setVerifyInputWhenFocusTarget(false);

        btnDocumentation.setText("Documentation");
        btnDocumentation.setNextFocusableComponent(txtPO);
        btnDocumentation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocumentationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBillingCustomerLayout = new javax.swing.GroupLayout(pnlBillingCustomer);
        pnlBillingCustomer.setLayout(pnlBillingCustomerLayout);
        pnlBillingCustomerLayout.setHorizontalGroup(
            pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblBillingContract, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBillingDept, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbDepartmentName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbContractNr, 0, 194, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDocumentation, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblBillingName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBillingAlias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBillingStreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBillingCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBillingContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBillingPhone1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblBillingPhone2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBillingCustomerLayout.createSequentialGroup()
                                        .addComponent(txtBillingPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblBillingExt2))
                                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                        .addComponent(txtBillingPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(3, 3, 3)
                                        .addComponent(lblBillingExt1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                        .addComponent(txtBillingExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblBillingEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                        .addComponent(txtBillingExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblBillingFax, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(2, 2, 2)
                                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBillingEmail)
                                    .addComponent(txtBillingFax, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)))
                            .addComponent(txtBillingAlias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtBillingContact)
                            .addComponent(txtBillingName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtBillingCity, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(txtBillingStreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                        .addComponent(lblBillingPostalCode)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtBillingPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                                        .addComponent(lblBillingProv)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtBillingProv, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        pnlBillingCustomerLayout.setVerticalGroup(
            pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBillingPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBillingProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBillingContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBillingContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingDept, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBillingContract, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDocumentation)
                            .addComponent(cmbContractNr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlBillingCustomerLayout.createSequentialGroup()
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBillingExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBillingCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBillingEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBillingExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBillingExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        pnlBillingCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblBillingAlias, lblBillingCity, lblBillingContact, lblBillingName, lblBillingPhone1, lblBillingPhone2, lblBillingStreet});

        pnlBillingCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBillingAlias, txtBillingCity, txtBillingContact, txtBillingEmail, txtBillingExt1, txtBillingExt2, txtBillingFax, txtBillingName, txtBillingPhone1, txtBillingPhone2, txtBillingPostalCode, txtBillingProv, txtBillingStreet});

        pnlCustomer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Info:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlCustomer.setFocusable(false);
        pnlCustomer.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pnlCustomer.setRequestFocusEnabled(false);
        pnlCustomer.setVerifyInputWhenFocusTarget(false);

        lblName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblName.setText("Customer Name:");
        lblName.setToolTipText("");
        lblName.setEnabled(false);
        lblName.setFocusable(false);
        lblName.setRequestFocusEnabled(false);
        lblName.setVerifyInputWhenFocusTarget(false);

        lblStreet.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblStreet.setText("Street:");
        lblStreet.setEnabled(false);
        lblStreet.setFocusable(false);
        lblStreet.setRequestFocusEnabled(false);
        lblStreet.setVerifyInputWhenFocusTarget(false);

        lblCity.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCity.setText("City:");
        lblCity.setToolTipText("");
        lblCity.setEnabled(false);
        lblCity.setFocusable(false);
        lblCity.setRequestFocusEnabled(false);
        lblCity.setVerifyInputWhenFocusTarget(false);

        lblContact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblContact.setText("Contact Name:");
        lblContact.setToolTipText("");
        lblContact.setEnabled(false);
        lblContact.setFocusable(false);
        lblContact.setMaximumSize(new java.awt.Dimension(69, 17));
        lblContact.setMinimumSize(new java.awt.Dimension(69, 17));
        lblContact.setPreferredSize(new java.awt.Dimension(69, 17));
        lblContact.setRequestFocusEnabled(false);
        lblContact.setVerifyInputWhenFocusTarget(false);

        lblPhone1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPhone1.setText("Phone #2:");
        lblPhone1.setToolTipText("");
        lblPhone1.setEnabled(false);
        lblPhone1.setFocusable(false);
        lblPhone1.setRequestFocusEnabled(false);
        lblPhone1.setVerifyInputWhenFocusTarget(false);

        lblPhone2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPhone2.setText("Phone #1:");
        lblPhone2.setToolTipText("");
        lblPhone2.setEnabled(false);
        lblPhone2.setFocusable(false);
        lblPhone2.setRequestFocusEnabled(false);
        lblPhone2.setVerifyInputWhenFocusTarget(false);

        lblExt1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblExt1.setText("Ext:");
        lblExt1.setToolTipText("");
        lblExt1.setEnabled(false);
        lblExt1.setFocusable(false);
        lblExt1.setRequestFocusEnabled(false);
        lblExt1.setVerifyInputWhenFocusTarget(false);

        lblExt2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblExt2.setText("Ext:");
        lblExt2.setToolTipText("");
        lblExt2.setEnabled(false);
        lblExt2.setFocusable(false);
        lblExt2.setRequestFocusEnabled(false);
        lblExt2.setVerifyInputWhenFocusTarget(false);

        lblProv.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblProv.setText("Prov:");
        lblProv.setToolTipText("");
        lblProv.setEnabled(false);
        lblProv.setFocusable(false);
        lblProv.setRequestFocusEnabled(false);
        lblProv.setVerifyInputWhenFocusTarget(false);

        lblFax.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblFax.setText("Fax #:");
        lblFax.setToolTipText("");
        lblFax.setEnabled(false);
        lblFax.setFocusable(false);
        lblFax.setRequestFocusEnabled(false);
        lblFax.setVerifyInputWhenFocusTarget(false);

        lblEmail.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblEmail.setText("Email:");
        lblEmail.setToolTipText("");
        lblEmail.setEnabled(false);
        lblEmail.setFocusable(false);
        lblEmail.setRequestFocusEnabled(false);
        lblEmail.setVerifyInputWhenFocusTarget(false);

        lblPostalCode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPostalCode.setText("Postal Code:");
        lblPostalCode.setToolTipText("");
        lblPostalCode.setEnabled(false);
        lblPostalCode.setFocusable(false);
        lblPostalCode.setRequestFocusEnabled(false);
        lblPostalCode.setVerifyInputWhenFocusTarget(false);

        lblStreetInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblStreetInfo.setText("Address Info:");
        lblStreetInfo.setEnabled(false);
        lblStreetInfo.setFocusable(false);
        lblStreetInfo.setRequestFocusEnabled(false);
        lblStreetInfo.setVerifyInputWhenFocusTarget(false);

        lblNameInfo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNameInfo.setText("Additional Details:");
        lblNameInfo.setToolTipText("");
        lblNameInfo.setEnabled(false);
        lblNameInfo.setFocusable(false);
        lblNameInfo.setRequestFocusEnabled(false);
        lblNameInfo.setVerifyInputWhenFocusTarget(false);

        lblUnit.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUnit.setText("Unit/Apt#:");
        lblUnit.setToolTipText("");
        lblUnit.setEnabled(false);
        lblUnit.setFocusable(false);
        lblUnit.setRequestFocusEnabled(false);
        lblUnit.setVerifyInputWhenFocusTarget(false);

        txtCustomer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtCustomer.setNextFocusableComponent(txtCustInfo);
        txtCustomer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustomerKeyPressed(evt);
            }
        });

        txtContact.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtContact.setNextFocusableComponent(txtPhone1);

        txtPhone1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPhone1.setText("xxx-xxx-xxxx");
        txtPhone1.setToolTipText("");
        txtPhone1.setNextFocusableComponent(txtExt1);
        txtPhone1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPhone1KeyPressed(evt);
            }
        });

        txtPhone2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPhone2.setText("xxx-xxx-xxxx");
        txtPhone2.setToolTipText("");
        txtPhone2.setNextFocusableComponent(txtExt2);

        txtExt1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtExt1.setNextFocusableComponent(txtPhone2);

        txtExt2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtExt2.setNextFocusableComponent(txtFax);

        txtProv.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtProv.setNextFocusableComponent(txtPostalCode);

        txtFax.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtFax.setText("xxx-xxx-xxxx");
        txtFax.setToolTipText("");
        txtFax.setNextFocusableComponent(txtEmail);

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtEmail.setNextFocusableComponent(txtBillingName);

        txtCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCity.setNextFocusableComponent(txtProv);
        txtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCityKeyPressed(evt);
            }
        });

        txtPostalCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPostalCode.setText("A1A 1A1");
        txtPostalCode.setNextFocusableComponent(txtContact);

        txtStreet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtStreet.setNextFocusableComponent(txtUnit);
        txtStreet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStreetKeyPressed(evt);
            }
        });

        txtStreetInfo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtStreetInfo.setNextFocusableComponent(txtCity);

        txtCustInfo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCustInfo.setNextFocusableComponent(txtStreet);

        txtUnit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtUnit.setNextFocusableComponent(txtStreetInfo);

        lblBundled.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblBundled.setText("Bundled:");
        lblBundled.setToolTipText("");
        lblBundled.setEnabled(false);
        lblBundled.setFocusable(false);
        lblBundled.setRequestFocusEnabled(false);
        lblBundled.setVerifyInputWhenFocusTarget(false);

        lblAvailBundles.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblAvailBundles.setText("Bundle #:");
        lblAvailBundles.setToolTipText("");
        lblAvailBundles.setEnabled(false);
        lblAvailBundles.setFocusable(false);
        lblAvailBundles.setRequestFocusEnabled(false);
        lblAvailBundles.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout pnlCustomerLayout = new javax.swing.GroupLayout(pnlCustomer);
        pnlCustomer.setLayout(pnlCustomerLayout);
        pnlCustomerLayout.setHorizontalGroup(
            pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerLayout.createSequentialGroup()
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNameInfo)
                    .addComponent(lblStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStreetInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPhone2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPhone1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBundled, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPhone2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addComponent(txtPhone1))
                            .addComponent(cbBundle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCustomerLayout.createSequentialGroup()
                                .addComponent(lblExt1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblFax, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlCustomerLayout.createSequentialGroup()
                                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                                        .addComponent(lblExt2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCustomerLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lblAvailBundles, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbBundles, 0, 213, Short.MAX_VALUE)
                                    .addComponent(txtFax, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmail))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCustomerLayout.createSequentialGroup()
                                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblProv)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtProv, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPostalCode)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPostalCode))
                            .addComponent(txtContact, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCustomer, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCustInfo, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCustomerLayout.createSequentialGroup()
                                .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(lblUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtStreetInfo, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        pnlCustomerLayout.setVerticalGroup(
            pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCustomerLayout.createSequentialGroup()
                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNameInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblStreetInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtExt1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFax, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtExt2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbBundle)
                            .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cmbBundles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblAvailBundles, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(26, Short.MAX_VALUE))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhone2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBundled, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(pnlCustomerLayout.createSequentialGroup()
                .addComponent(txtCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCustInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtStreetInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtProv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPostalCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCustomerLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 125, Short.MAX_VALUE))
        );

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblStreetInfo, txtStreetInfo});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblStreet, txtStreet});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblUnit, txtUnit});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblName, lblNameInfo, txtCustInfo, txtCustomer});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblContact, txtContact});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblCity, txtCity});

        pnlCustomerLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblAvailBundles, lblBundled, lblEmail, lblExt1, lblExt2, lblFax, lblPhone1, lblPhone2});

        lblUnit.getAccessibleContext().setAccessibleName("Unit#:");

        javax.swing.GroupLayout pnlInfoLayout = new javax.swing.GroupLayout(pnlInfo);
        pnlInfo.setLayout(pnlInfoLayout);
        pnlInfoLayout.setHorizontalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBillingCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        pnlInfoLayout.setVerticalGroup(
            pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInfoLayout.createSequentialGroup()
                .addGroup(pnlInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBillingCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        pnlDetails.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPO.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPO.setText("PO#:");
        lblPO.setToolTipText("");
        lblPO.setEnabled(false);
        lblPO.setFocusable(false);
        lblPO.setRequestFocusEnabled(false);
        lblPO.setVerifyInputWhenFocusTarget(false);

        txtPO.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPO.setNextFocusableComponent(btngrpPerService);

        javax.swing.GroupLayout pnlDetailsLayout = new javax.swing.GroupLayout(pnlDetails);
        pnlDetails.setLayout(pnlDetailsLayout);
        pnlDetailsLayout.setHorizontalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPO, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(txtPO, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        pnlDetailsLayout.setVerticalGroup(
            pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDetailsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblPO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPO, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(3, 3, 3))
        );

        pnlPayment.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Info:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlPayment.setPreferredSize(new java.awt.Dimension(1112, 122));
        pnlPayment.setRequestFocusEnabled(false);

        rbCheck.setSelected(true);
        rbCheck.setText("Check");
        rbCheck.setNextFocusableComponent(rbMastercard);
        rbCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCheckActionPerformed(evt);
            }
        });

        rbVisa.setText("VISA");
        rbVisa.setNextFocusableComponent(rbPcard);
        rbVisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbVisaActionPerformed(evt);
            }
        });

        rbMastercard.setText("Mastercard");
        rbMastercard.setNextFocusableComponent(rbOthers);
        rbMastercard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMastercardActionPerformed(evt);
            }
        });

        rbPcard.setText("P-card");
        rbPcard.setActionCommand("Pcard");
        rbPcard.setNextFocusableComponent(rbInSuit);
        rbPcard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPcardActionPerformed(evt);
            }
        });

        rbOthers.setText("Others");
        rbOthers.setNextFocusableComponent(rbVisa);
        rbOthers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOthersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPaymentLayout = new javax.swing.GroupLayout(pnlPayment);
        pnlPayment.setLayout(pnlPaymentLayout);
        pnlPaymentLayout.setHorizontalGroup(
            pnlPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(rbCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbMastercard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbOthers, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbVisa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbPcard, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        pnlPaymentLayout.setVerticalGroup(
            pnlPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCheck)
                    .addComponent(rbMastercard)
                    .addComponent(rbOthers)
                    .addComponent(rbVisa)
                    .addComponent(rbPcard))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pnlService.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Service Type:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlService.setPreferredSize(new java.awt.Dimension(1112, 59));

        rbEmergency.setText("Emergency Service");
        rbEmergency.setNextFocusableComponent(rbBlock);
        rbEmergency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEmergencyActionPerformed(evt);
            }
        });

        rbBlock.setText("Block Treatment/Total Building Treatment");
        rbBlock.setNextFocusableComponent(rbRegular);
        rbBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBlockActionPerformed(evt);
            }
        });

        rbRegular.setLabel("Regular Service - Common Area");
        rbRegular.setNextFocusableComponent(rbNew);
        rbRegular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbRegularActionPerformed(evt);
            }
        });

        rbNew.setFocusTraversalPolicyProvider(true);
        rbNew.setLabel("New");
        rbNew.setNextFocusableComponent(rbProduct);
        rbNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNewActionPerformed(evt);
            }
        });

        rbProduct.setLabel("Product");
        rbProduct.setNextFocusableComponent(rbOther);
        rbProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbProductActionPerformed(evt);
            }
        });

        rbOther.setLabel("Other(Preparation,Proofing, OdourControl...) ");
        rbOther.setNextFocusableComponent(rbAM);
        rbOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbOtherActionPerformed(evt);
            }
        });

        rbInSuit.setSelected(true);
        rbInSuit.setText("In Suit Regular Service Day");
        rbInSuit.setActionCommand("");
        rbInSuit.setNextFocusableComponent(rbEmergency);
        rbInSuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInSuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlServiceLayout = new javax.swing.GroupLayout(pnlService);
        pnlService.setLayout(pnlServiceLayout);
        pnlServiceLayout.setHorizontalGroup(
            pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServiceLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbInSuit)
                    .addComponent(rbEmergency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbBlock)
                    .addComponent(rbRegular)
                    .addComponent(rbNew)
                    .addComponent(rbProduct)
                    .addComponent(rbOther))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlServiceLayout.setVerticalGroup(
            pnlServiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServiceLayout.createSequentialGroup()
                .addComponent(rbInSuit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbEmergency)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbBlock)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbRegular)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbNew)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbProduct)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbOther)
                .addContainerGap())
        );

        pnlSchedule.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Schedule:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlSchedule.setPreferredSize(new java.awt.Dimension(1112, 61));

        pnlPartOfDay.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rbAM.setText("AM");
        rbAM.setNextFocusableComponent(rbPM);
        rbAM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAMActionPerformed(evt);
            }
        });

        rbPM.setText("PM");
        rbPM.setNextFocusableComponent(rbAnytime);
        rbPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPMActionPerformed(evt);
            }
        });

        rbAnytime.setSelected(true);
        rbAnytime.setText("Anytime");
        rbAnytime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAnytimeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPartOfDayLayout = new javax.swing.GroupLayout(pnlPartOfDay);
        pnlPartOfDay.setLayout(pnlPartOfDayLayout);
        pnlPartOfDayLayout.setHorizontalGroup(
            pnlPartOfDayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPartOfDayLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPartOfDayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbAM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbAnytime, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlPartOfDayLayout.setVerticalGroup(
            pnlPartOfDayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPartOfDayLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbAM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbPM)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbAnytime)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlScheduleLayout = new javax.swing.GroupLayout(pnlSchedule);
        pnlSchedule.setLayout(pnlScheduleLayout);
        pnlScheduleLayout.setHorizontalGroup(
            pnlScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScheduleLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(pnlPartOfDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlScheduleLayout.setVerticalGroup(
            pnlScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScheduleLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(pnlPartOfDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlActions.setEnabled(false);
        pnlActions.setPreferredSize(new java.awt.Dimension(1112, 60));

        btnCancel.setText("Cancel");
        btnCancel.setToolTipText("Return to Main Menu page");
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.setNextFocusableComponent(btnSave);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnNext.setText("Next");
        btnNext.setToolTipText("");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.setNextFocusableComponent(btnNext);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlActionsLayout = new javax.swing.GroupLayout(pnlActions);
        pnlActions.setLayout(pnlActionsLayout);
        pnlActionsLayout.setHorizontalGroup(
            pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionsLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(341, 341, 341)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 425, Short.MAX_VALUE)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        pnlActionsLayout.setVerticalGroup(
            pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlActionsLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(pnlActionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlFreq.setBorder(javax.swing.BorderFactory.createTitledBorder("Invoice Frequency:"));
        pnlFreq.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        btngrpPerService.setSelected(true);
        btngrpPerService.setText("Per Service Request");
        btngrpPerService.setNextFocusableComponent(btngrpMonthly);
        btngrpPerService.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btngrpPerServiceMousePressed(evt);
            }
        });

        btngrpMonthly.setText("Net 30");
        btngrpMonthly.setNextFocusableComponent(rbCheck);
        btngrpMonthly.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btngrpMonthlyMousePressed(evt);
            }
        });

        javax.swing.GroupLayout pnlFreqLayout = new javax.swing.GroupLayout(pnlFreq);
        pnlFreq.setLayout(pnlFreqLayout);
        pnlFreqLayout.setHorizontalGroup(
            pnlFreqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFreqLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(btngrpPerService)
                .addGap(53, 53, 53)
                .addComponent(btngrpMonthly, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlFreqLayout.setVerticalGroup(
            pnlFreqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFreqLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(pnlFreqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btngrpPerService)
                    .addComponent(btngrpMonthly))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 1197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnlService, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                                .addGap(8, 8, 8))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlActions, javax.swing.GroupLayout.PREFERRED_SIZE, 1168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(pnlFreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlService, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(pnlSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlActions, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void initializeSession(){
        try{
            factory = new Configuration().configure().buildSessionFactory();
            //session = factory.openSession( new MyInterceptor() );
            session = factory.openSession();
            
        }catch (Throwable ex) { 
            System.err.println("Failed to create sessionFactory object." + ex);
            throw new ExceptionInInitializerError(ex); 
        }
    }
    
    private List executeHQLQuery(String query){
        System.out.println("Session executeHQLQuery opened");
        resultList = null;
        try{
            tx = session.beginTransaction();
            System.out.println("Session executeHQLQuery tx begin");
            Query q = session.createQuery(query);
            System.out.println("Session executeHQLQuery query completed");
            resultList = q.list();
            tx.commit();
        }
        catch (HibernateException he){
            if (tx!=null) tx.rollback();
            he.printStackTrace();
        }
        //when to close it????
        //finally{
        //    session.close();
        //    System.out.println("Session executeHQLQuery closed");
        //}
        
        return resultList;
    }
    
    private void displayMessage(String message){JOptionPane.showMessageDialog(null,message,"",JOptionPane.ERROR_MESSAGE);}
    private void displayMessage(String message,String Title){JOptionPane.showMessageDialog(null,message,Title,JOptionPane.ERROR_MESSAGE);}
        
    /* Method to CREATE an employee in the database */
    public Integer addCustomer(String fname, String lname, int salary){
        tx = null;
        CustID = null;
        try{
            tx = session.beginTransaction();
            new_customer = new Customer();
                    // Business business, Department department, Users users, String customerName, String notes, 
                    // String address, String addressNotes, String city, String province, String postalCode, String contactName, String primaryPhone, 
                    // String ext, String secondaryPhone, String ext2, String other, String fax, String emailAddress, String contractNr, 
                    // Date creationDate, Date updateDate, Set serviceRequests);
                    
            CustID = (Integer) session.save(new_customer); 
            tx.commit();
        }catch (HibernateException e) {
            if (tx!=null) tx.rollback();
            e.printStackTrace(); 
        }
        //finally {
        //    session.close(); 
        //}
        return CustID;
    }
   
    public void UpdateCustomer(Integer CustID,Integer BDLID, Business business, Department department, Users users, String customerName, String notes, String address, String addressNotes, String city, String province, String postalCode, String contactName, String primaryPhone, String ext, String secondaryPhone, String ext2, String other, String fax, String emailAddress, String contractNr, Date creationDate, Date updateDate, Set serviceRequests){
        //Bundles bundles, Business business, Department department, String contractNr Set serviceRequests
        session = HibernateUtil.getSessionFactory().openSession();
        tx = null;
        try{
            tx = session.beginTransaction();
            Customer update_customer = (Customer)session.get(Customer.class,CustID);
            Bundles update_bundle = (Bundles)session.get(Bundles.class,BDLID);
            Business update_business = (Business)session.get(Business.class,BID);
            update_customer.setCustomerName(customerName);
            update_customer.setNotes(notes);
            update_customer.setAddress(address);
            update_customer.setAddressNotes(addressNotes);
            update_customer.setCity(city);
            update_customer.setProvince(province);
            update_customer.setPostalCode(postalCode);
            update_customer.setContactName(contactName);
            update_customer.setPrimaryPhone(primaryPhone);
            update_customer.setExt(ext);
            update_customer.setSecondaryPhone(secondaryPhone);
            update_customer.setExt2(ext2);
            update_customer.setOther(other);
            update_customer.setFax(fax);
            update_customer.setEmailAddress(emailAddress);
            update_customer.setUpdateDate(updateDate);
            update_customer.setBusiness(business)  ;
        }
        catch (HibernateException e) {
            if (tx!=null) tx.rollback();
            e.printStackTrace(); 
        }
        finally {
            session.close(); 
        }
   }
    
    private void grpFreq( ) {
        ButtonGroup bgFreq = new ButtonGroup( );
        bgFreq.add(btngrpPerService);
        bgFreq.add(btngrpMonthly);
    }
    private void grpServType(){
        ButtonGroup bgServType = new ButtonGroup( );
        bgServType.add(rbEmergency);
        bgServType.add(rbRegular);
        bgServType.add(rbInSuit);
        bgServType.add(rbBlock);
        bgServType.add(rbNew);
        bgServType.add(rbProduct);
        bgServType.add(rbOther);
    }
    private void grpPayment(){
        ButtonGroup bgPayment = new ButtonGroup( );
        bgPayment.add(rbVisa);
        bgPayment.add(rbCheck);
        bgPayment.add(rbMastercard);
        bgPayment.add(rbPcard);
        bgPayment.add(rbOthers);
    }
    private void grpSchedule( ) {
        ButtonGroup rbSchedule = new ButtonGroup( );
        rbSchedule.add(rbAM);
        rbSchedule.add(rbPM);
        rbSchedule.add(rbAnytime);
    }
    
    private void disable_form(){
        System.out.println("disable_form");
        for (Component cp : pnlCustomer.getComponents() ){cp.setEnabled(false);}
        for (Component cp : pnlBillingCustomer.getComponents() ){cp.setEnabled(false);}
        for (Component cp : pnlDetails.getComponents() ){cp.setEnabled(false);}
        for (Component cp : pnlFreq.getComponents() ){cp.setEnabled(false);}
        for (Component cp : pnlPayment.getComponents() ){cp.setEnabled(false);}
        for (Component cp : pnlService.getComponents() ){cp.setEnabled(false);}
        for (Component cp : pnlSchedule.getComponents() ){cp.setEnabled(false);}
        btnSave.setEnabled(false);
        btnNext.setEnabled(false);
        txtCustomer.setEnabled(true);
    }
   
    private void btngrpPerServiceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btngrpPerServiceMousePressed
        if (btngrpPerService.isSelected()){Freq = btngrpPerService.getText();System.out.println("Freq:" + Freq);}
    }//GEN-LAST:event_btngrpPerServiceMousePressed

    private void btngrpMonthlyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btngrpMonthlyMousePressed
        if (btngrpMonthly.isSelected()){Freq = btngrpMonthly.getText();}
    }//GEN-LAST:event_btngrpMonthlyMousePressed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        MainMenu regFace = new MainMenu();
	regFace.setSize(700,800);
	regFace.setLocationRelativeTo(null);
	regFace.setResizable(false);
	dispose();
	regFace.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void rbEmergencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEmergencyActionPerformed
        if (rbEmergency.isSelected()){ServiceType = rbEmergency.getText();}
    }//GEN-LAST:event_rbEmergencyActionPerformed

    private void rbRegularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbRegularActionPerformed
        if (rbRegular.isSelected()){ServiceType = rbRegular.getText();}
    }//GEN-LAST:event_rbRegularActionPerformed

    private void rbBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBlockActionPerformed
        if (rbBlock.isSelected()){ServiceType = rbBlock.getText();}
    }//GEN-LAST:event_rbBlockActionPerformed

    private void rbNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNewActionPerformed
        if (rbNew.isSelected()){ServiceType = rbNew.getText();}
    }//GEN-LAST:event_rbNewActionPerformed

    private void rbProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbProductActionPerformed
        if (rbProduct.isSelected()){ServiceType = rbProduct.getText();}
    }//GEN-LAST:event_rbProductActionPerformed

    private void rbOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOtherActionPerformed
        if (rbOther.isSelected()){ServiceType = rbOther.getText();}
    }//GEN-LAST:event_rbOtherActionPerformed

    private void rbInSuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInSuitActionPerformed
        if (rbInSuit.isSelected()){ServiceType = rbInSuit.getText();}
    }//GEN-LAST:event_rbInSuitActionPerformed

    private void rbVisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbVisaActionPerformed
        if (rbVisa.isSelected()){Payment = rbVisa.getText();}
    }//GEN-LAST:event_rbVisaActionPerformed

    private void rbCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCheckActionPerformed
        if (rbCheck.isSelected()){Payment = rbCheck.getText();}
    }//GEN-LAST:event_rbCheckActionPerformed

    private void rbMastercardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMastercardActionPerformed
        if (rbMastercard.isSelected()){Payment = rbMastercard.getText();}
    }//GEN-LAST:event_rbMastercardActionPerformed

    private void rbPcardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPcardActionPerformed
        if (rbPcard.isSelected()){Payment = rbPcard.getText();}
    }//GEN-LAST:event_rbPcardActionPerformed

    private void rbOthersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbOthersActionPerformed
        if (rbOthers.isSelected()){Payment = rbOthers.getText();}
    }//GEN-LAST:event_rbOthersActionPerformed

    public class CustDlg extends JFrame implements ActionListener{
        JLabel Lbl = new JLabel("Is this a new Customer?");
        JPanel AskPanel = new JPanel();
        JButton BtnYes = new JButton("Yes");
        JButton BtnNo = new JButton("No");
        private final JDialog Dlg = new JDialog((CreateSR) null,"Question",true);
        public void init()
        {
            Container DlgCntnr = Dlg.getContentPane();
            DlgCntnr.setLayout(new FlowLayout());
            DlgCntnr.add(Lbl);
            AskPanel.add(BtnYes);
            AskPanel.add(BtnNo);
            DlgCntnr.add(AskPanel);
            BtnYes.addActionListener(this);
            BtnNo.addActionListener(this);
            //Dlg.setBounds(220, 160, 220, 170);
            Dlg.setSize(220, 100);
            Dlg.setLocationRelativeTo(null);
            Dlg.show();
        }
        public void dispose(){Dlg.dispose();}
        public void actionPerformed(ActionEvent e1){
            if(e1.getSource() == BtnYes){CustomerType = "New";Dlg.dispose();}
            else{CustomerType = "Existing";Dlg.dispose();}
        }
    }
    
    public class SaveDlg extends JFrame implements ActionListener{
        JLabel Lbl = new JLabel("Are you sure you want to save the customer info?");
        JPanel AskPanel = new JPanel();
        JButton BtnYes = new JButton("Yes");
        JButton BtnCancel = new JButton("Cancel");
        String message;
        //private final JDialog Dlg = new JDialog((CreateSR) null,"Update Customer Info", true);
        private JDialog Dlg;
        // = new JDialog((CreateSR) null,message, true);
        public void init()
        {
            if (CustomerType.equals("New")){ 
                message = "Insert Customer Info";
                Dlg = new JDialog((CreateSR) null,message, true);
            }
            else{
                message = "Update Customer Info";
                Dlg = new JDialog((CreateSR) null,message, true);
            }
            Container DlgCntnr = Dlg.getContentPane();
            DlgCntnr.setLayout(new FlowLayout());
            DlgCntnr.add(Lbl);
            AskPanel.add(BtnYes);
            AskPanel.add(BtnCancel);
            DlgCntnr.add(AskPanel);
            BtnYes.addActionListener(this);
            BtnCancel.addActionListener(this);
            //Dlg.setBounds(220, 160, 220, 170);
            Dlg.setSize(300, 100);
            Dlg.setLocationRelativeTo(null);
            Dlg.setUndecorated(true);
            Dlg.getRootPane().setWindowDecorationStyle(1);
            Dlg.show();
        }
        public void dispose(){Dlg.dispose();}
        public void actionPerformed(ActionEvent e1){
            if(e1.getSource() == BtnYes)
                {
                    //String bundle = "";
                    if (CustomerType == "Existing"){
                        //ME.updateCustomer(txtCustomer.getText(),txtCustInfo.getText(),txtStreet.getText(),txtStreetInfo.getText(),txtCity.getText(),txtProv.getText(),txtPostalCode.getText(),txtContact.getText(),txtPhone1.getText(),txtExt1.getText(),txtPhone2.getText(),txtExt2.getText(),txtFax.getText(),txtEmail.getText(),txtBillingDept.getText(),txtBillingContract.getText(),DateUtils.now_date_time());
                    }else{
                        //new_customer
                        //ME.addCustomer();
                    }
                    //try{    
                        //get bundle info
                        //if (cbBundle.isEnabled()){
                        //    bundle = cmbBundles.getSelectedItem().toString();
                        //}
                        
                        //get user_id
                        //String return_field = "User_ID"; 
                        //String sqlStmt = "Select " + return_field + " from Users where user_name = '" + frmLogin.user_name + "'";
                        //String sqlStmt = "Select " + return_field + " from Users where user_name = '" + user_name + "'";
                        //Integer user_id = Integer.getInteger(SQLConnection.return_value(sqlStmt,return_field));
                        //rs = SQLConnection.getRecordSet(sqlStmt);
                        //ServiceRequest new_cust = new ServiceRequest();
                        //Integer user_id = rs.getInt("User_ID");
                        /*sqlStmt = "UPDATE Customer SET CustomerName = '" + txtCustomer.getText() + "'," 
                                + " Notes = '" + txtCustInfo.getText() + "',"
                                + " Address = '" + txtStreet.getText() + "',"
                                + " AddressNotes = '" + txtStreetInfo.getText() + "',"
                                + " City = '" + txtCity.getText() + "',"
                                + " Province = '" + txtProv.getText() + "',"
                                + " PostalCode = '" + txtPostalCode.getText() + "',"
                                + " ContactName = '" + txtContact.getText() + "',"
                                + " PrimaryPhone = '" + txtPhone1.getText() + "',"
                                + " Ext = '" + txtExt1.getText() + "',"
                                + " SecondaryPhone = '" + txtPhone2.getText() + "',"
                                + " Ext2 = '" + txtExt2.getText() + "',"
                                + " Other = '',"
                                + " Fax = '" + txtFax.getText() + "',"
                                + " EmailAddress = '" + txtEmail.getText() + "',"
                                //+ " BundleName = '" + bundle + "',"
                                + " DepartmentName = '" + txtBillingDept.getText() + "',"
                                + " ContractNr = '" + txtBillingContract.getText() + "',"
                                + " UpdateDate = '" + DateUtils.now_date_time() + "',";
                                //+ " UID = '" + new_cust.getuser_id() + "'"
                                //+ " where CID = '" + new_cust.getCustID() + "'";
                                //+ " UserID = '(SELECT User_ID from Users where user_name = '" + frmLogin.user_name + "')'"
                                //+ " where cust_id = '" + CustID + "'";

                        System.out.println(sqlStmt);
                        */
                        //int updateCust = SQLConnection.updateRecordSet(sqlStmt);
                        //reload Customer class
                        //int user_id = new_cust.getuser_id();
                        //int custID = new_cust.getCustID();
                        //Customer upd_Cust = new Customer(user_id,txtCustomer.getText(),txtCustInfo.getText(),txtStreet.getText(),txtStreetInfo.getText(), txtCity.getText(), txtProv.getText(), txtPostalCode.getText(), txtContact.getText(),txtPhone1.getText(),txtExt1.getText(),txtPhone2.getText(),txtExt2.getText(),txtFax.getText(),txtEmail.getText(),bundle, txtBillingDept.getText(),txtBillingContract.getText(),custID);
                        //System.out.println("test" + upd_Cust.CustID);
                        //update Billing info
                        //if (BusinessID > 0) {
                            //need to add new bundle if it was updated
                            //sqlStmt = "SELECT count(*) as num from Bundles where BundleName = '" + bundle 
                            //        + "' and BID = '" + BusinessID + "'";
                            //rs = SQLConnection.getRecordSet(sqlStmt);
                            //System.out.println("count is: " + rs.getInt("num"));
                            //if (rs.getInt("num") == 0){
                            //    sqlStmt = "INSERT INTO Bundles (BID,BundleName) VALUES (?,?)";
                             //   System.out.println(sqlStmt);
                                //PreparedStatement stmt = SQLConnection.conn.prepareStatement(sqlStmt);//"insert into Bundles (BID, BundleName) values (?, ?)");
                                //System.out.println("insert into Bundles (BID, BundleName) values (?, ?)");
                                //stmt.setInt(1, BusinessID);
                            //    System.out.println("1");
                                //stmt.setString(2, bundle);
                            //    System.out.println("2");
                                //stmt.executeUpdate();
                                
                                //SQLConnection.insertRecordSet(sqlStmt);
                            //}
                            /*
                            sqlStmt = "UPDATE Business_Details SET Name = '" + txtBillingName.getText() + "'," 
                                    + " Alias = '" + txtBillingAlias.getText() + "',"
                                    + " Address = '" + txtBillingStreet.getText() + "',"
                                    + " City = '" + txtBillingCity.getText() + "',"
                                    + " Province = '" + txtBillingProv.getText() + "',"
                                    + " PostalCode = '" + txtBillingPostalCode.getText() + "',"
                                    + " ContactName = '" +txtBillingContact.getText() + "',"
                                    + " PrimaryPhone = '" +txtBillingPhone1.getText() + "',"
                                    + " Ext = '" + txtBillingExt1.getText() + "',"
                                    + " SecondaryPhone = '" +txtBillingPhone2.getText() + "',"
                                    + " Ext2 = '" + txtBillingExt2.getText() + "',"
                                    + " Fax ='" + txtBillingFax.getText() + "',"
                                    + " EmailAddress = '" + txtBillingEmail.getText() + "',"
                                    + " UpdateDate = '" + DateUtils.now_date_time() + "'"
                                    + " where BID = '" + BusinessID + "'";
*/
                            //System.out.println(sqlStmt);
                            //int updateBillingCust = SQLConnection.updateRecordSet(sqlStmt);
                        //}
                        //if ((updateCust == 1) && (updateBillingCust == 1)){
                            //JOptionPane.showMessageDialog(null,"Customer Info Updated");
                        //    JOptionPane.showMessageDialog(null, "Customer Info Updated", "Success!!", 1);
                        //    Dlg.dispose();
                        //}

                    //}
                    //catch (SQLException ex) {
                        //Logger.getLogger(ServiceReceipt.class.getName()).log(Level.SEVERE, null, ex);
                        //if (stmt != null) { stmt.close(); }
                    //    System.out.println("error");      
                    //}
                }
            else {
                //CustomerType = "Existing";
                Dlg.dispose();
            }
        }
    }
    
    private void txtCustomerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)  {
            if (CustomerType.equals("Existing")){
                CustomerList = executeHQLQuery(QUERY_BASED_ON_CUSTOMER_NAME + txtCustomer.getText() + "%'");
                System.out.println("CustomerList retrieved");
                switch (CustomerList.size()){
                    case 0:
                        displayMessage("There is no customer with Name containing '" + txtCustomer.getText() + "'");
                        break;
                    case 1:
                        for(Object obj : CustomerList){
                            new_customer = (Customer)obj;
                            fillInfo(new_customer);
                            //fillBusinessInfo(new_customer);
                        }
                        System.out.println("after fillinfo");

                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        break;
                    default:
                        //System.out.println("multiple records");
                        //sqlStmt = "select CustomerName, Address from Customer where CustomerName like '%" + strInput + "%'";
                        //String tblName = "Customer";
                        //rs = SQLConnection.getMultipleRecordsRS(sqlStmt);
                        MultipleRecords MultipleCustomers = new MultipleRecords();
                        MultipleCustomers.init();
                        MultipleCustomers.dispose();
                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        pnlFreq.requestFocus();
                        break;
                }
            }
            else {
                System.out.println("new customer ");
                //check the name to be at least 5 characters
                if (txtCustomer.getText().length() >= 5){
                    for (Component cp : pnlCustomer.getComponents() ){
                        cp.setEnabled(true);
                    }
                    pnlCustomer.setEnabled(true);
                    txtBillingName.setEnabled(true);
                }
                else{displayMessage("Customer Name is less than 5 characters","Customer Name too short!!!");}
            }
        }
    }//GEN-LAST:event_txtCustomerKeyPressed

    private void txtStreetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStreetKeyPressed
        
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) || (evt.getKeyCode() == KeyEvent.VK_TAB)) {
            //System.out.println("street1 :" + strInput);
            if (CustomerType.equals("Existing")){
                CustomerList = executeHQLQuery(QUERY_BASED_ON_CUSTOMER_STREET + txtStreet.getText() + "%'");
                switch (CustomerList.size()){
                    case 0:
                        displayMessage("There is no customer with Street containing '" + txtStreet.getText() + "'");
                        break;
                    case 1:
                        for(Object obj : CustomerList){
                            new_customer = (Customer)obj;
                            fillInfo(new_customer);
                            //fillBusinessInfo(new_customer);
                        }
                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        break;
                    default:
                        System.out.println("multiple records");
                        //String sqlStmt = "select CustomerName, Address from Customer where Address like '%" + strInput + "%'";
                        //rs = SQLConnection.getMultipleRecordsRS(sqlStmt);
                        //for(Object obj : CustomerList){
                        //    Customer new_customer = (Customer)obj;
                            //fillInfo(new_customer);
                        //}
                        MultipleRecords MultipleCustomers = new MultipleRecords();
                        MultipleCustomers.init();
                        MultipleCustomers.dispose();
                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        break;
                }
            }
            else {
                System.out.println("new customer");
                if (txtStreet.getText().length() <= 5){displayMessage("Customer Street is less than 5 characters","Street Name too short!!!");}
            }
        }
    }//GEN-LAST:event_txtStreetKeyPressed

    private void rbPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPMActionPerformed
        if (rbPM.isSelected()){DaySched = rbPM.getText();}
    }//GEN-LAST:event_rbPMActionPerformed

    private void rbAMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAMActionPerformed
        if (rbAM.isSelected()){DaySched = rbAM.getText();}
    }//GEN-LAST:event_rbAMActionPerformed

    private void rbAnytimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAnytimeActionPerformed
        if (rbAnytime.isSelected()){DaySched = rbAnytime.getText();}
    }//GEN-LAST:event_rbAnytimeActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //SaveDlg save_dlg = new SaveDlg();
        //save_dlg.init();
        //save_dlg.dispose();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
                
        //System.out.println("Date is:" +jCalendar1.getDate().toString());
        /*CreateSRActivities SRActivities = new CreateSRActivities();
        SRActivities.setSize(800,600);
        SRActivities.setLocationRelativeTo(null);
        SRActivities.setResizable(false);
        SRActivities.setLayout(new BorderLayout());
        //dispose();
        this.setVisible(false);
        SRActivities.setVisible(true);
        System.out.println("here in ServiceReceipt");
        */
        
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnDocumentationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocumentationActionPerformed
        /*Documentation frmDocumentation = new Documentation();
        frmDocumentation.setSize(380,380);
        frmDocumentation.setLocationRelativeTo(null);
        frmDocumentation.setResizable(false);
        dispose();
        frmDocumentation.setVisible(true);
        System.out.println("Documentation");*/
    }//GEN-LAST:event_btnDocumentationActionPerformed

    private void txtCityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCityKeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) && (CustomerType.equals("New")) && (txtCity.getText().isEmpty())){displayMessage("City is a mandatory field","City is Mandatory!!");}
    }//GEN-LAST:event_txtCityKeyPressed

    private void txtPhone1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPhone1KeyPressed
        if (((evt.getKeyCode() == KeyEvent.VK_ENTER) ) && (CustomerType.equals("New"))){
            if (txtPhone1.getText().isEmpty()){displayMessage("Phone # is a mandatory field","Phone# is Mandatory!!");}
            else{btnSave.setEnabled(true);}
        }
    }//GEN-LAST:event_txtPhone1KeyPressed

    private void jCalendar1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCalendar1MouseClicked
        btnNext.setEnabled(true);
    }//GEN-LAST:event_jCalendar1MouseClicked
/**/
    private void txtBillingNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingNameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            if (txtBillingName.getText().length() == 0){
                for (Component cp : pnlFreq.getComponents() ){cp.setEnabled(true);pnlFreq.requestFocus();}
                for (Component cp : pnlPayment.getComponents() ){cp.setEnabled(true);}
                for (Component cp : pnlService.getComponents() ){cp.setEnabled(true);}
                for (Component cp : pnlSchedule.getComponents() ){cp.setEnabled(true);}
            }
            else if (txtBillingName.getText().length() > 3) {
                //first we need to check if the Billing name is existing
                BusinessList = executeHQLQuery(QUERY_BASED_ON_BILLING_NAME + txtBillingName.getText() + "%'");
                System.out.println("BillingList retrieved");
                switch (BusinessList.size()){
                    //case 0:
                    //    displayMessage("There is no customer with Name containing '" + txtCustomer.getText() + "'");
                    //    break;
                    case 1:
                        for(Object obj : BusinessList){
                            //Object obj = new BillingList();
                            new_business = (Business)obj;
                            fillBusinessInfo(new_business);
                            List BundleList = executeHQLQuery(QUERY_BASED_ON_BUNDLES);
                            fillBundleInfo(BundleList);
                            List DeptList = executeHQLQuery(QUERY_BASED_ON_DEPARTMENT);
                            fillDeptInfo(DeptList);
                        }
                        System.out.println("after fillinfo");

                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        break;
                    default:
                        //System.out.println("multiple records");
                        //sqlStmt = "select CustomerName, Address from Customer where CustomerName like '%" + strInput + "%'";
                        //String tblName = "Customer";
                        //rs = SQLConnection.getMultipleRecordsRS(sqlStmt);
                        MultipleRecords MultipleCustomers = new MultipleRecords();
                        MultipleCustomers.init();
                        MultipleCustomers.dispose();
                        btnNext.setEnabled(true);
                        btnSave.setEnabled(true);
                        pnlFreq.requestFocus();
                        break;
                }
                for (Component cp : pnlBillingCustomer.getComponents() ){cp.setEnabled(true);txtBillingAlias.requestFocus();}
                for (Component cp : pnlFreq.getComponents() ){cp.setEnabled(true);}
                for (Component cp : pnlPayment.getComponents() ){cp.setEnabled(true);}
                for (Component cp : pnlService.getComponents() ){cp.setEnabled(true);}
                for (Component cp : pnlSchedule.getComponents() ){cp.setEnabled(true);}
            }
            else{displayMessage("Billing Name is less than 4 characters","Billing Name too short!!!");txtBillingName.requestFocus();}
        }
    }//GEN-LAST:event_txtBillingNameKeyPressed
/**/
    private void txtBillingStreetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingStreetKeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) && (txtBillingStreet.getText().length() <= 5)){displayMessage("Billing Street is less than 5 characters","Street Name too short!!!");txtBillingStreet.requestFocus();}
    }//GEN-LAST:event_txtBillingStreetKeyPressed

    private void txtBillingCityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingCityKeyPressed
        if (((evt.getKeyCode() == KeyEvent.VK_ENTER)) && (CustomerType.equals("New")) && (txtBillingCity.getText().isEmpty())){displayMessage("Billing City is a mandatory field","City is Mandatory!!");txtBillingCity.requestFocus();}
    }//GEN-LAST:event_txtBillingCityKeyPressed

    private void txtBillingPhone1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBillingPhone1KeyPressed
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER) && ((CustomerType.equals("New")) && (txtBillingPhone1.getText().isEmpty()))){displayMessage("Billing Phone is a mandatory field","Phone is Mandatory!!");}
    }//GEN-LAST:event_txtBillingPhone1KeyPressed

    private void jCalendar1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCalendar1MouseReleased
        btnNext.setEnabled(true);
    }//GEN-LAST:event_jCalendar1MouseReleased
  
    public class MultipleRecords extends JFrame implements ActionListener{
        JLabel Lbl = new JLabel("These customers match the search criteria. Please select one:");
        JPanel AskPanel = new JPanel();
        JButton BtnOK = new JButton("OK");
        JComboBox CustList = new JComboBox(); 
        JComboBox AddressList = new JComboBox(); 
        private final JDialog Dlg = new JDialog((CreateSR) null,"Dialog", true);
        public void init()
        {
            Container DlgCntnr = Dlg.getContentPane();
            DlgCntnr.setLayout(new FlowLayout());
            DlgCntnr.add(Lbl);
            DlgCntnr.add(CustList);
            //fill CustList with the records
            for(Object obj : CustomerList){
                new_customer = (Customer)obj;
                
                CustList.addItem(new_customer.getCid() +"|" + new_customer.getCustomerName() + " at " + new_customer.getAddress());
            }
            AskPanel.add(BtnOK);
            DlgCntnr.add(AskPanel);
            BtnOK.addActionListener(this);
            //Dlg.setBounds(220, 160, 220, 170);
            Dlg.setSize(500, 150);
            Dlg.setLocationRelativeTo(null);
            Dlg.show();
        }
        private Object makeObj(final String item)  {
            return new Object() { public String toString() { return item; } };
        }
        public void dispose(){Dlg.dispose();}
        public void actionPerformed(ActionEvent e1){
            System.out.println("actioned performed by ");      
            if(e1.getSource() == BtnOK){
                //return the item which was selected
                //Session session = factory.openSession();
                //Transaction tx = null;
                try{
                    //tx = session.beginTransaction();
                    System.out.println("Selected customer is:" + CustList.getSelectedItem().toString());
                    String delims = "[|]";
                    String [] tokens = CustList.getSelectedItem().toString().split(delims);
                    System.out.println("Selected ID is " + tokens[0]);
              
                    //Customer 
                    new_customer = (Customer)session.get(Customer.class, Integer.getInteger(tokens[0]));
                    txtCustomer.setText(new_customer.getCustomerName());
                    /*txtCustInfo.setText(my_customer.getNotes());
                    txtCustomer.setText(my_customer.getCustomerName());
                    txtCustInfo.setText(my_customer.getNotes());
                    txtStreet.setText(my_customer.getAddress());
                    txtStreetInfo.setText(my_customer.getAddressNotes());
                    txtCity.setText(my_customer.getCity());
                    txtProv.setText(my_customer.getProvince());
                    txtPostalCode.setText(my_customer.getPostalCode());
                    txtContact.setText(my_customer.getContactName());
                    txtPhone1.setText(my_customer.getPrimaryPhone());
                    txtExt1.setText(my_customer.getExt());
                    txtPhone2.setText(my_customer.getSecondaryPhone());
                    txtExt2.setText(my_customer.getExt2());
                    txtFax.setText(my_customer.getFax());
                    txtEmail.setText(my_customer.getEmailAddress());
                    cmbBundles.setSelectedItem(my_customer.getBundles().getBundleName());
                    if ((my_customer.getBundles().getBundleName()).isEmpty()){cbBundle.setSelected(false);}
                    txtBillingDept.setText(my_customer.getDepartment().getDeptName());
                    //txtBillingContract.setText(new_customer.getDepartment().getContractNr());

                    txtBillingName.setText(my_customer.getBusiness().getName());
                    txtBillingAlias.setText(my_customer.getBusiness().getAlias());
                    txtBillingStreet.setText(my_customer.getBusiness().getAddress());
                    txtBillingCity.setText(my_customer.getBusiness().getCity());
                    txtBillingProv.setText(my_customer.getBusiness().getProvince());
                    txtBillingPostalCode.setText(my_customer.getBusiness().getPostalCode());
                    txtBillingContact.setText(my_customer.getBusiness().getContactName());
                    txtBillingPhone1.setText(my_customer.getBusiness().getPrimaryPhone());
                    txtBillingExt1.setText(my_customer.getBusiness().getExt());
                    txtBillingPhone2.setText(my_customer.getBusiness().getSecondaryPhone());
                    txtBillingExt2.setText(my_customer.getBusiness().getExt2());
                    txtBillingFax.setText(my_customer.getBusiness().getFax());
                    txtBillingEmail.setText(my_customer.getBusiness().getEmailAddress());
                    */
                    tx.commit();
                }catch (HibernateException e) {
                    if (tx!=null) tx.rollback();
                        e.printStackTrace(); 
                }
                //finally {
                //    session.close(); 
                //}
                
                //System.out.println("actioned performed " + CustList.getSelectedItem().toString().replace(" at ", "|"));
                //String new_String = CustList.getSelectedItem().toString().replace(" at ", "|");
                //String delims = "[|]";
                //String [] tokens = new_String.split(delims);
                //System.out.println("actioned " + tokens[0]);
                //System.out.println("another " + tokens[1]);
                
                //sqlStmt = "select CID,CustomerName,Notes,Address,AddressNotes,City,Province,PostalCode,ContactName,PrimaryPhone,Ext,SecondaryPhone,Ext2,Fax,EmailAddress,BID,BundleName,DepartmentName,ContractNr,UID from Customer where Address = '" + tokens[1] + "' and CustomerName = '" + tokens[0] + "'";
                //rs = SQLConnection.getRecordSet(sqlStmt);
                //fillInfo(rs);
                Dlg.dispose();
            }
        }
    }
    public void fillInfo(Customer new_customer){
        System.out.println("fill Customer Info");
        
        txtCustomer.setText(new_customer.getCustomerName());
        txtCustInfo.setText(new_customer.getNotes());
        txtStreet.setText(new_customer.getAddress());
        txtStreetInfo.setText(new_customer.getAddressNotes());
        txtCity.setText(new_customer.getCity());
        txtProv.setText(new_customer.getProvince());
        txtPostalCode.setText(new_customer.getPostalCode());
        txtContact.setText(new_customer.getContactName());
        txtPhone1.setText(new_customer.getPrimaryPhone());
        txtExt1.setText(new_customer.getExt());
        txtPhone2.setText(new_customer.getSecondaryPhone());
        txtExt2.setText(new_customer.getExt2());
        txtFax.setText(new_customer.getFax());
        txtEmail.setText(new_customer.getEmailAddress());
        cmbBundles.setSelectedItem(new_customer.getBundles().getBundleName());
        if ((new_customer.getBundles().getBundleName()).isEmpty()){cbBundle.setSelected(false);}
        txtBillingName.setText(new_customer.getBusiness().getName());
        txtBillingAlias.setText(new_customer.getBusiness().getAlias());
        txtBillingStreet.setText(new_customer.getBusiness().getAddress());
        txtBillingCity.setText(new_customer.getBusiness().getCity());
        txtBillingProv.setText(new_customer.getBusiness().getProvince());
        txtBillingPostalCode.setText(new_customer.getBusiness().getPostalCode());
        txtBillingContact.setText(new_customer.getBusiness().getContactName());
        txtBillingPhone1.setText(new_customer.getBusiness().getPrimaryPhone());
        txtBillingExt1.setText(new_customer.getBusiness().getExt());
        txtBillingPhone2.setText(new_customer.getBusiness().getSecondaryPhone());
        txtBillingExt2.setText(new_customer.getBusiness().getExt2());
        txtBillingFax.setText(new_customer.getBusiness().getFax());
        txtBillingEmail.setText(new_customer.getBusiness().getEmailAddress());
    }
    public void fillCustomerInfo(Customer new_customer){
        System.out.println("fill Customer Info");
        
        txtCustomer.setText(new_customer.getCustomerName());
        txtCustInfo.setText(new_customer.getNotes());
        txtStreet.setText(new_customer.getAddress());
        txtStreetInfo.setText(new_customer.getAddressNotes());
        txtCity.setText(new_customer.getCity());
        txtProv.setText(new_customer.getProvince());
        txtPostalCode.setText(new_customer.getPostalCode());
        txtContact.setText(new_customer.getContactName());
        txtPhone1.setText(new_customer.getPrimaryPhone());
        txtExt1.setText(new_customer.getExt());
        txtPhone2.setText(new_customer.getSecondaryPhone());
        txtExt2.setText(new_customer.getExt2());
        txtFax.setText(new_customer.getFax());
        txtEmail.setText(new_customer.getEmailAddress());
        cmbBundles.setSelectedItem(new_customer.getBundles().getBundleName());
        if ((new_customer.getBundles().getBundleName()).isEmpty()){cbBundle.setSelected(false);}
        cmbDepartmentName.setSelectedItem(new_customer.getDepartment().getDeptName());
        cmbContractNr.setSelectedItem(new_customer.getDepartment().getContractNr());
        
    }    
    public void fillBusinessInfo(Business new_business){
        System.out.println("fillInfo");
        
        txtBillingName.setText(new_business.getName());
        txtBillingAlias.setText(new_business.getAlias());
        txtBillingStreet.setText(new_business.getAddress());
        txtBillingCity.setText(new_business.getCity());
        txtBillingProv.setText(new_business.getProvince());
        txtBillingPostalCode.setText(new_business.getPostalCode());
        txtBillingContact.setText(new_business.getContactName());
        txtBillingPhone1.setText(new_business.getPrimaryPhone());
        txtBillingExt1.setText(new_business.getExt());
        txtBillingPhone2.setText(new_business.getSecondaryPhone());
        txtBillingExt2.setText(new_business.getExt2());
        txtBillingFax.setText(new_business.getFax());
        txtBillingEmail.setText(new_business.getEmailAddress());
        //cmbDepartment.setSelectedItem(this_cust.DepartmentName);
        //cmbContractNr.setSelectedItem(this_cust.ContractNr);
    }
    public void fillBundleInfo(List bundleList){
        Bundles new_bundle = new Bundles();
        cmbBundles.removeAllItems();
        cmbBundles.setEditable(true);
        for (Iterator iterator = bundleList.iterator(); iterator.hasNext();){
            Bundles my_bundles = (Bundles) iterator.next(); 
            cmbBundles.addItem((String) my_bundles.getBundleName());
        }
    }
    public void fillDeptInfo(List deptList){
        cmbDepartmentName.removeAllItems();
        cmbContractNr.removeAllItems();
        cmbDepartmentName.setEditable(true);
        cmbContractNr.setEditable(true);
        for (Iterator iterator = deptList.iterator(); iterator.hasNext();){
            Department my_dept = (Department) iterator.next(); 
            cmbDepartmentName.addItem((String) my_dept.getDeptName());
            cmbContractNr.addItem((String) my_dept.getContractNr());
        }
    }        
    /*
    public void create_service_request(){
        try{
            
            sqlStmt = "INSERT INTO Service_Request "
                                   + "(Cust_id,BID,DeptID,PONr,Invoicing,ServiceType,PaymentType,Schedule,ServiceDate,CreationDate,UpdateDate,User_id,ActivityCount) "
                                   + "values (?,?,?,?,?,?,?,?,?,?,?,?,?)";
            System.out.println(sqlStmt);
            PreparedStatement stmt = SQLConnection.conn.prepareStatement(sqlStmt);
            //Integer ServiceReqNr generated by the db
            stmt.setInt(1, CustID);
            stmt.setInt(2, BusinessID);
            if (!txtBillingDept.getText().isEmpty()){
                System.out.println("DeptID=" + DeptID);
                String sqlStmt1 = "Select DeptID from Department WHERE DeptName = '" + txtBillingDept.getText() + "'";
                rs = SQLConnection.getRecordSet(sqlStmt1);
                DeptID = rs.getInt("DeptID");
                stmt.setInt(3,DeptID);
                System.out.println("DeptID=" + DeptID);
            }
            else{
                DeptID = 0;
                stmt.setInt(3,DeptID);
            }
            stmt.setString(4, avoid_null(txtPO.getText()).toString());
            stmt.setString(5,Freq);
            stmt.setString(6,ServiceType);
            stmt.setString(7,Payment);
            stmt.setString(8,DaySched);
            stmt.setString(9,DateUtils.Calendar_date(jCalendar1.getDate()));
            stmt.setString(10,DateUtils.now_date_time());
            stmt.setString(11,DateUtils.now_date_time());
            stmt.setInt(12,frmLogin.user_id);        
            stmt.setInt(13,0);
            System.out.println("CustID:" + CustID + ";BusinessID:" + BusinessID + ";DeptID:" + DeptID + ";PO:" + txtPO.getText().toString() + ";Freq:" 
                    + Freq + ";ServiceType:" + ServiceType + ";Payment:" + Payment + ";DaySched:" + DaySched + ";Calendar:" 
                    + DateUtils.Calendar_date(jCalendar1.getDate()) + ";CreationDate:" + DateUtils.now_date_time() + ";UpdateDate:" + DateUtils.now_date_time() 
                    + ";user_id:" + frmLogin.user_id);
            
            stmt.executeUpdate();   

            //SQLConnection.conn.commit();
            //need to retrieve ServiceReqNr
            sqlStmt = "Select ServiceReqNr from Service_Request WHERE User_id='" + frmLogin.user_id + "' AND ActivityCount = 0";
            rs = SQLConnection.getRecordSet(sqlStmt);
            System.out.println("ServiceReqNr is: " + rs.getInt("ServiceReqNr"));
            ServiceReqNr = rs.getString("ServiceReqNr");
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }
    */
    public Object avoid_null(Object field_value){return (field_value == null) ? "": field_value;}
    
    public void allow_vk_tab(){
    //@see JTable constructor
    Set<KeyStroke> forwardKeys = new HashSet<KeyStroke>(1);
    forwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, InputEvent.CTRL_MASK));
    setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, forwardKeys);

    Set<KeyStroke> backwardKeys = new HashSet<KeyStroke>(1);
    backwardKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, InputEvent.SHIFT_MASK | InputEvent.CTRL_MASK));
    setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, backwardKeys);
    }
    
    /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


public class MyInterceptor extends EmptyInterceptor {
    private int updates;
    private int creates;
    private int loads;

    public void onDelete(Object entity,
                    Serializable id,
                    Object[] state,
                    String[] propertyNames,
                    org.hibernate.type.Type[] types) {
       // do nothing
   }

   // This method is called when Employee object gets updated.
    public boolean onFlushDirty(Object entity,
                    Serializable id,
                    Object[] currentState,
                    Object[] previousState,
                    String[] propertyNames,
                    org.hibernate.type.Type[] types) {
        if ( entity instanceof Customer ) {
            System.out.println("Update Operation");
            return true; 
        }
        return false;
    }
    public boolean onLoad(Object entity,
                    Serializable id,
                    Object[] state,
                    String[] propertyNames,
                    org.hibernate.type.Type[] types) {
        // do nothing
        return true;
    }
    // This method is called when Employee object gets created.
    public boolean onSave(Object entity,
                    Serializable id,
                    Object[] state,
                    String[] propertyNames,
                    org.hibernate.type.Type[] types) {
        if ( entity instanceof Customer ) {
            System.out.println("Create Operation");
            return true; 
        }
        return false;
    }
    //called before commit into database
    public void preFlush(Iterator iterator) {System.out.println("preFlush");}
    //called after committed into database
    public void postFlush(Iterator iterator) {System.out.println("postFlush");}
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDocumentation;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnSave;
    private javax.swing.JRadioButton btngrpMonthly;
    private javax.swing.JRadioButton btngrpPerService;
    private javax.swing.JCheckBox cbBundle;
    private javax.swing.JComboBox<String> cmbBundles;
    private javax.swing.JComboBox<String> cmbContractNr;
    private javax.swing.JComboBox<String> cmbDepartmentName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAvailBundles;
    private javax.swing.JLabel lblBillingAlias;
    private javax.swing.JLabel lblBillingCity;
    private javax.swing.JLabel lblBillingContact;
    private javax.swing.JLabel lblBillingContract;
    private javax.swing.JLabel lblBillingDept;
    private javax.swing.JLabel lblBillingEmail;
    private javax.swing.JLabel lblBillingExt1;
    private javax.swing.JLabel lblBillingExt2;
    private javax.swing.JLabel lblBillingFax;
    private javax.swing.JLabel lblBillingName;
    private javax.swing.JLabel lblBillingPhone1;
    private javax.swing.JLabel lblBillingPhone2;
    private javax.swing.JLabel lblBillingPostalCode;
    private javax.swing.JLabel lblBillingProv;
    private javax.swing.JLabel lblBillingStreet;
    private javax.swing.JLabel lblBundled;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblExt1;
    private javax.swing.JLabel lblExt2;
    private javax.swing.JLabel lblFax;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNameInfo;
    private javax.swing.JLabel lblPO;
    private javax.swing.JLabel lblPhone1;
    private javax.swing.JLabel lblPhone2;
    private javax.swing.JLabel lblPostalCode;
    private javax.swing.JLabel lblProv;
    private javax.swing.JLabel lblStreet;
    private javax.swing.JLabel lblStreetInfo;
    private javax.swing.JLabel lblUnit;
    private javax.swing.JPanel pnlActions;
    private javax.swing.JPanel pnlBillingCustomer;
    private javax.swing.JPanel pnlCustomer;
    private javax.swing.JPanel pnlDetails;
    private javax.swing.JPanel pnlFreq;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JPanel pnlPartOfDay;
    private javax.swing.JPanel pnlPayment;
    private javax.swing.JPanel pnlSchedule;
    private javax.swing.JPanel pnlService;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JRadioButton rbAM;
    private javax.swing.JRadioButton rbAnytime;
    private javax.swing.JRadioButton rbBlock;
    private javax.swing.JRadioButton rbCheck;
    private javax.swing.JRadioButton rbEmergency;
    private javax.swing.JRadioButton rbInSuit;
    private javax.swing.JRadioButton rbMastercard;
    private javax.swing.JRadioButton rbNew;
    private javax.swing.JRadioButton rbOther;
    private javax.swing.JRadioButton rbOthers;
    private javax.swing.JRadioButton rbPM;
    private javax.swing.JRadioButton rbPcard;
    private javax.swing.JRadioButton rbProduct;
    private javax.swing.JRadioButton rbRegular;
    private javax.swing.JRadioButton rbVisa;
    private javax.swing.JTextField txtBillingAlias;
    private javax.swing.JTextField txtBillingCity;
    private javax.swing.JTextField txtBillingContact;
    private javax.swing.JTextField txtBillingEmail;
    private javax.swing.JTextField txtBillingExt1;
    private javax.swing.JTextField txtBillingExt2;
    private javax.swing.JTextField txtBillingFax;
    private javax.swing.JTextField txtBillingName;
    private javax.swing.JTextField txtBillingPhone1;
    private javax.swing.JTextField txtBillingPhone2;
    private javax.swing.JTextField txtBillingPostalCode;
    private javax.swing.JTextField txtBillingProv;
    private javax.swing.JTextField txtBillingStreet;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtCustInfo;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtExt1;
    private javax.swing.JTextField txtExt2;
    private javax.swing.JTextField txtFax;
    private javax.swing.JTextField txtPO;
    private javax.swing.JTextField txtPhone1;
    private javax.swing.JTextField txtPhone2;
    private javax.swing.JTextField txtPostalCode;
    private javax.swing.JTextField txtProv;
    private javax.swing.JTextField txtStreet;
    private javax.swing.JTextField txtStreetInfo;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables
}